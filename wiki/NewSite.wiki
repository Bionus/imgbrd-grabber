#summary How to create a new site file.

= Based on gelbooru, danbooru or shimmie =

To add an imageboard/booru:
  # Start the program.
  # Click on the "Sources" button at the bottom of the window ("Explore" tab).
  # Click on the "Add" button at the bottom of the window that just popped up.
  # Fill the Url field, and leave "Guess" checked.
  # If an error occurs, uncheck "Guess", and choose an imageboard in the list.

* Note: if Shimmie-based boards are currently supported, a lot of them are still buggy, so beware when using them. *


= Add a site type =

If your site is not based on danbooru/gelbooru/shimmie, it gets more complicated. *You must have a minimal knowledge of XML and regex to make your own one.* Here is an example of file you'll have to create (it is the danbooru's file):
{{{
<?xml version="1.0" encoding="utf-8" ?>
<Site>
	<Name>Danbooru</Name>
	<Urls>
		<Xml>
			<Tags>/post/index.xml?login={pseudo}&amp;password_hash={password}&amp;limit={limit}&amp;page={page}&amp;tags={tags}</Tags>
		</Xml>
		<Json>
			<Tags>/post/index.json?login={pseudo}&amp;password_hash={password}&amp;limit={limit}&amp;page={page}&amp;tags={tags}</Tags>
		</Json>
		<Html>
			<Tags>/post/index?login={pseudo}&amp;password_hash={password}&amp;limit={limit}&amp;page={page}&amp;tags={tags}</Tags>
			<Post>/post/show/{id}</Post>
		</Html>
	</Urls>
	<Regex>
		<Tags>&lt;li class=&quot;tag-type-([^&quot;]+)&quot;&gt;.*&lt;a href=&quot;[^&quot;]+&quot;[^&gt;]*&gt;([^&lt;\?]+)&lt;/a&gt;.*&lt;span class=&quot;post-count&quot;&gt;(\d+)&lt;/span&gt;.*&lt;/li&gt;</Tags>
		<Image>&lt;span class=&quot;.*&quot; id=&quot;p(\d*)&quot;&gt;.*&lt;a .*&gt;.*(&lt;img[ ]+class=&quot;.*&quot; src=&quot;((?:.*)/data/preview/(.*).jpg)&quot; title=&quot;(.+) rating:(.*) score:(.*) user:(.*)&quot; alt=&quot;.*&quot; width=.* height=.*&gt;).*&lt;/a&gt;.*&lt;/span&gt;</Image>
		<Order>id|image|preview_url|md5|tags|rating|score|user</Order>
		<LastPage>&lt;link href=&quot;/post\?limit=\d*&amp;page=(\d*)&amp;tags=[^&quot;]*&quot; rel=&quot;last&quot; title=&quot;Last Page&quot;&gt;</LastPage>
		<Pools>&lt;div class=&quot;status-notice&quot; id=&quot;pool\d+&quot;&gt;[^&lt;]*Pool:[^&lt;]*(?:&lt;a href=&quot;/post/show/(\d+)&quot; &gt;&amp;lt;&amp;lt;&lt;/a&gt;)?[^&lt;]*&lt;a href=&quot;/pool/show/(\d+)&quot; &gt;([^&lt;]+)&lt;/a&gt;[^&lt;]*(?:&lt;a href=&quot;/post/show/(\d+)&quot; &gt;&amp;gt;&amp;gt;&lt;/a&gt;)?[^&lt;]*&lt;/div&gt;</Pools>
		<Wiki>&lt;div id=&quot;sidebar-wiki&quot;(?:[^&gt;]+)&gt;(.+)&lt;/div&gt;</Wiki>
	</Regex>
	<Modifiers>rating:safe rating:questionable rating:explicit user: fav: fastfav: md5: source: id: width: height: score: mpixels: filesize: date: gentags: arttags: chartags: copytags: approver: parent: sub: status:any status:deleted status:active status:flagged status:pending order:id order:id_desc order:score order:score_asc order:mpixels order:mpixels_asc order:filesize order:landscape order:portrait order:favcount order:rank order:change order:change_desc parent:none unlocked:rating</Modifiers>
	<FirstPage>1</FirstPage>
</Site>
}}}
Let's explain it in detail.
  * Name: the name that will be shown in the sources window.
  * Urls: the pages urls. You must set at least Html/Post and either Xml/Tags, Json/Tags, Rss/Tags or Html/Tags. They must start with a slash.
   * Xml
    * Tags: url to the site's XML API. You can use {pseudo}, {password}, {limit}, {page} and {tags}.
   * Json
    * Tags: same as Xml, but for the JSON API.
   * Rss
    * Tags: same as Xml and Json, but for the RSS API.
   * Html
    * Tags: same as Xml, Json and Rss, but for human browsing.
    * Post: url of an image's details. You can use {id}.
    * Image (optional): URL to an image. You can use {md5}, {id} and {ext}. You can also make changes to the current url of all images. For example, zerochan links to reduced images in its API. However, you can access an image's full-size version by replacing "/600/" by "/full/" ("`http://static.zerochan.net/600/08/46/1089808.jpg`" becames "`http://static.zerochan.net/full/08/46/1089808.jpg`"). To do so, you can set Urls/Html/Image to "/600/->/full/".
   * Limit (optional): if the API returns a fixed number of images, you can set this value to the number of images per page.
  * Regex: even when using XML, JSON or RSS, some regex must be used, for example for the detailed tags or the wiki.
   * Tags: regex that must return a list of tags from the Html/Post url. Must capture tag's type, tag and count (in this order, but you can just return the tag's type and tag).
   * Image: regex that must return a list of images from the Html/Post url. Must capture id and preview_url, but can capture md5, tags, rating, score and user (any order, see below).
   * Order: capture order, separated with a "|". For example "id|preview_url" means that the first captured text in the Image regex will be id, and the second one the preview image's url.
   * Last page (optional): regex that must return the last page, if XML API don't give it. Must only capture page number.
   * ImageUrl (optional): regex that must return an image's url from its details page.
  * FirstPage: the number of the first page, usually 1 (but, for example, gelbooru starts with 0).
  * DefaultTag (optional): the tag that must be used in all queries if the user doesn't search one.
_You may want to use CDATAs portions not to escape your regexes, however it won't work, so you'll have to escape all these characters._

Then, save it to "%USERPROFILE%/Grabber/sites/your_site_here/model.xml". You should also put in this directory an icon.png file, which is the 16x16 image that will be displayed in the sources window.

* Note: this is an example, and it is not necessarily up to date. To get an updated version of these sites files, get one from the "%USERPROFILE%/Grabber/sites" folder. *