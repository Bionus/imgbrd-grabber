{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Home","text":""},{"location":"index.html#features","title":"Features","text":""},{"location":"index.html#browse","title":"Browse","text":"<ul> <li>Tabs to make multiple searches at the same time</li> <li>Able to show results from multiple imageboards at the same time in a single tab</li> <li>Remove duplicate results from multiple-imageboard searches</li> <li>Auto-completion of tags in the search field</li> <li>Blacklisting of tags to mark or hide images you don't want to see</li> <li>Proxy support</li> <li>Post-filtering (useful for imageboards limiting the number of tags you can use in a single search)</li> <li>Auto-download images as you search according to a whitelist</li> </ul>"},{"location":"index.html#download","title":"Download","text":"<ul> <li>Download thousands of images at once</li> <li>Download single images using their MD5 or ID</li> <li>Command line interface to download images</li> </ul>"},{"location":"index.html#customize","title":"Customize","text":"<ul> <li>Add your own imageboards very easily</li> <li>Authentication for sources behind a login wall</li> <li>Theme support using CSS. See Themes for details.</li> <li>Lots of options to customize the program's behaviour</li> </ul>"},{"location":"index.html#organize","title":"Organize","text":"<ul> <li>Save images using a custom format, for example <code>%artist%/%copyright%/%character%/%md5%.%ext%</code>, or using Javascript code. See Filename for details.</li> <li>Favorite tags to keep track of new images</li> <li>\"View it later\" tags to save a search for later</li> <li>Support saving images directly to a local booru, such as Szurubooru, MyImouto, Gelbooru, or Shimmie.</li> <li>Can add entries to a database for each image or tag while downloading. See Commands for details.</li> <li>Conditional filenames triggered by a tag</li> <li>Rename already downloaded images</li> </ul>"},{"location":"index.html#sources","title":"Sources","text":"<p>Danbooru</p> <p></p> <p>Gelbooru</p> <p></p> <p>Shimmie</p> <p></p> <p>Yande.re</p> <p></p> <p>e621</p> <p></p> <p>Konachan</p> <p></p> <p>Zerochan</p> <p></p> <p>rule34</p> <p></p> <p>Safebooru</p> <p></p> <p>Behoimi</p> <p>Note that those are only a few sources present by default, but you can add as many as you want very easily!</p>"},{"location":"index.html#languages","title":"Languages","text":"<p>English</p> <p></p> <p>French</p> <p></p> <p>Russian</p> <p></p> <p>Chinese (simplified)</p> <p></p> <p>Spanish</p>"},{"location":"index.html#downloads","title":"Downloads","text":"<p>Windows (x64)</p> <p>Windows (x64, zip)</p> <p></p> <p>Linux (AppImage)</p> <p>Linux (tar.gz)</p> <p>Linux (Flathub)</p> <p>Arch Linux (AUR)</p> <p></p> <p>MacOS (homebrew)</p> <p>MacOS (dmg)</p> <p></p> <p>Android</p>"},{"location":"blog/index.html","title":"Blog","text":""},{"location":"blog/index.html#blog","title":"Blog","text":""},{"location":"blog/2019/03/31/grabber-700-released.html","title":"Grabber 7.0.0 released","text":""},{"location":"blog/2019/03/31/grabber-700-released.html#grabber-700-released","title":"Grabber 7.0.0 released","text":"<p>Grabber 7.0.0 has been released.</p> <p>The list of changes and download links can be found on GitHub: https://github.com/Bionus/imgbrd-grabber/releases/tag/v7.0.0</p>"},{"location":"blog/2019/04/01/grabber-701-released.html","title":"Grabber 7.0.1 released","text":""},{"location":"blog/2019/04/01/grabber-701-released.html#grabber-701-released","title":"Grabber 7.0.1 released","text":"<p>Grabber 7.0.1 has been released.</p> <p>The list of changes and download links can be found on GitHub: https://github.com/Bionus/imgbrd-grabber/releases/tag/v7.0.1</p>"},{"location":"blog/2019/04/18/grabber-710-released.html","title":"Grabber 7.1.0 released","text":""},{"location":"blog/2019/04/18/grabber-710-released.html#grabber-710-released","title":"Grabber 7.1.0 released","text":"<p>Grabber 7.1.0 has been released.</p> <p>The list of changes and download links can be found on GitHub: https://github.com/Bionus/imgbrd-grabber/releases/tag/v7.1.0</p>"},{"location":"blog/2019/05/19/grabber-711-released.html","title":"Grabber 7.1.1 released","text":""},{"location":"blog/2019/05/19/grabber-711-released.html#grabber-711-released","title":"Grabber 7.1.1 released","text":"<p>Grabber 7.1.1 has been released.</p> <p>The list of changes and download links can be found on GitHub: https://github.com/Bionus/imgbrd-grabber/releases/tag/v7.1.1</p>"},{"location":"blog/2020/02/28/grabber-720-released.html","title":"Grabber 7.2.0 released","text":""},{"location":"blog/2020/02/28/grabber-720-released.html#grabber-720-released","title":"Grabber 7.2.0 released","text":"<p>Grabber 7.2.0 has been released.</p> <p>The list of changes and download links can be found on GitHub: https://github.com/Bionus/imgbrd-grabber/releases/tag/v7.2.0</p>"},{"location":"blog/2020/02/28/grabber-721-released.html","title":"Grabber 7.2.1 released","text":""},{"location":"blog/2020/02/28/grabber-721-released.html#grabber-721-released","title":"Grabber 7.2.1 released","text":"<p>Grabber 7.2.1 has been released.</p> <p>The list of changes and download links can be found on GitHub: https://github.com/Bionus/imgbrd-grabber/releases/tag/v7.2.1</p>"},{"location":"blog/2020/06/03/grabber-730-released.html","title":"Grabber 7.3.0 released","text":""},{"location":"blog/2020/06/03/grabber-730-released.html#grabber-730-released","title":"Grabber 7.3.0 released","text":"<p>Grabber 7.3.0 has been released.</p> <p>The list of changes and download links can be found on GitHub: https://github.com/Bionus/imgbrd-grabber/releases/tag/v7.3.0</p>"},{"location":"blog/2020/07/24/grabber-731-released.html","title":"Grabber 7.3.1 released","text":""},{"location":"blog/2020/07/24/grabber-731-released.html#grabber-731-released","title":"Grabber 7.3.1 released","text":"<p>Grabber 7.3.1 has been released.</p> <p>The list of changes and download links can be found on GitHub: https://github.com/Bionus/imgbrd-grabber/releases/tag/v7.3.1</p>"},{"location":"blog/2020/08/01/grabber-732-released.html","title":"Grabber 7.3.2 released","text":""},{"location":"blog/2020/08/01/grabber-732-released.html#grabber-732-released","title":"Grabber 7.3.2 released","text":"<p>Grabber 7.3.2 has been released.</p> <p>The list of changes and download links can be found on GitHub: https://github.com/Bionus/imgbrd-grabber/releases/tag/v7.3.2</p>"},{"location":"blog/2020/10/29/android-version.html","title":"Android version","text":""},{"location":"blog/2020/10/29/android-version.html#android-version","title":"Android version","text":"<p>Hey everyone!</p> <p> </p> <p>For those that might not follow the project closely on GitHub, there's a new Android version of Grabber that's under active development.</p> <p></p> <p>You can find more details here, such as screenshots, status, roadmap, etc.: Bionus/imgbrd-grabber#2147</p> <p>Or if you just want to download it, here's the link! Grabber_nightly.apk</p> <p>It's still rough around the edges, but the basics are there! Feel free to comment here or on GitHub if you have any feedback, suggestions, requests, etc.!</p> <p> </p> <p>Best, Bionus</p>"},{"location":"blog/2020/11/17/appimage-for-linux-releases.html","title":"AppImage for Linux releases","text":""},{"location":"blog/2020/11/17/appimage-for-linux-releases.html#appimage-for-linux-releases","title":"AppImage for Linux releases","text":"<p>Hey everyone!</p> <p> </p> <p>Just a heads-up that I'm currently in the process of testing a new format for Linux releases for Grabber, namely using AppImage instead of tar.gz.</p> <p>You can find more info about the AppImage format on appimage.org.</p> <p>This change is quite new and as such is still only available for GitHub nightlies, and there might be a few issues here and there. If that's the case, please do ping me by mail or on GitHub!</p> <p>You can find the download here: https://github.com/Bionus/imgbrd-grabber/releases/nightly</p> <p>The next official release should also have an AppImage file available if nightlies are not your thing.</p> <p> </p> <p>Best, Bionus</p>"},{"location":"blog/2020/11/19/moving-the-ci-to-github-actions.html","title":"Moving the CI to GitHub actions","text":""},{"location":"blog/2020/11/19/moving-the-ci-to-github-actions.html#moving-the-ci-to-github-actions","title":"Moving the CI to GitHub actions","text":"<p>Hey everyone!</p> <p> </p> <p>Some might have already noticed, but the Grabber build is slowly being migrated to GitHub actions.</p> <p>Until now, it was using AppVeyor for Windows builds and Travis CI for Linux and macOS builds.</p> <p>While adding the new Android build, a new nightly has been introduced, which is the \"GitHub nightly\": https://github.com/Bionus/imgbrd-grabber/releases/nightly-github</p> <p>It's been running for a few weeks with no issues or failing builds for no reason (unlike the other platforms). The new Linux AppImage format has also been implemented using them very quickly.</p> <p>Now that I consider it quite stable, I plan to first migrate the \"official\" nightlies to it, and generate the next official Grabber release with it as well.</p> <p>The main goal of this migration is simplicity, i.e. not having to check multiple websites to know if the build is failing or not. Having everything in GitHub makes it clearer. Also, the fact that it supports all platforms directly allows to replace two third-party services by only one first-party.</p> <p> </p> <p>Best, Bionus</p>"},{"location":"blog/2020/11/25/discord-server.html","title":"Discord server","text":""},{"location":"blog/2020/11/25/discord-server.html#discord-server","title":"Discord server","text":"<p>Hey everyone!</p> <p> </p> <p>Multiple people asked for it, and since very few people were using the Gitter server, I've decided to move the chat/discussion server to Discord. I'll still be on Gitter for a while, but it will eventually be closed to avoid having two places for the same thing.</p> <p>Here is the invite link: https://discord.gg/pWnY5eW3rz</p> <p>Try not to use it for reporting things you believe to be bugs or huge suggestions, unless you want them to be lost or forgotten within the discussion flow (for this, you should keep using GitHub issues as usual). The main goal is discussion about Grabber and quick questions that might not warrant a big ticket.</p> <p> </p> <p>Best, Bionus</p>"},{"location":"blog/2021/01/21/tag-databases.html","title":"Tag databases","text":""},{"location":"blog/2021/01/21/tag-databases.html#tag-databases","title":"Tag databases","text":"<p>Hey everyone!</p> <p> </p> <p>Tag databases, while documented on this very website, is a little-known feature of Grabber. However, they are very useful, and as such there is ongoing work to make them easier to use.</p> <p>Part of this work is a way to provide already generated tag databases so that users don't need to spend a lot of time and overload servers' tag APIs. The more people use tag databases, the fewer requests are done on servers, saving both users and servers bandwidth, since the additional request to get tag information is not necessary anymore.</p> <p>The already generated tag databases can now be found here: https://github.com/Bionus/imgbrd-grabber/releases/tag-databases</p> <p>Currently, only one source has been added, selected because to a recent issue where a tag database would have been very useful. But I am open to suggestions for sources where providing such a database would be useful! Feel free to suggest those on GitHub as usual, with a rationale.</p> <p>Note that those are not bundled with the installer because they can quickly take a lot of size, and not everyone would use those sources. So for those users, they would be a waste of space on their machine.</p> <p>The next steps include: * Automatically generating those databases from time to time using GitHub actions * Automatically downloading them from Grabber</p> <p> </p> <p>Best, Bionus</p>"},{"location":"blog/2021/03/07/grabber-740-released.html","title":"Grabber 7.4.0 released","text":""},{"location":"blog/2021/03/07/grabber-740-released.html#grabber-740-released","title":"Grabber 7.4.0 released","text":"<p>Grabber 7.4.0 has been released.</p> <p>The list of changes and download links can be found on GitHub: https://github.com/Bionus/imgbrd-grabber/releases/tag/v7.4.0</p>"},{"location":"blog/2021/03/10/grabber-741-released.html","title":"Grabber 7.4.1 released","text":""},{"location":"blog/2021/03/10/grabber-741-released.html#grabber-741-released","title":"Grabber 7.4.1 released","text":"<p>Grabber 7.4.1 has been released.</p> <p>The list of changes and download links can be found on GitHub: https://github.com/Bionus/imgbrd-grabber/releases/tag/v7.4.1</p>"},{"location":"blog/2021/03/13/grabber-742-released.html","title":"Grabber 7.4.2 released","text":""},{"location":"blog/2021/03/13/grabber-742-released.html#grabber-742-released","title":"Grabber 7.4.2 released","text":"<p>Grabber 7.4.2 has been released.</p> <p>The list of changes and download links can be found on GitHub: https://github.com/Bionus/imgbrd-grabber/releases/tag/v7.4.2</p>"},{"location":"blog/2021/03/13/grabber-743-released.html","title":"Grabber 7.4.3 released","text":""},{"location":"blog/2021/03/13/grabber-743-released.html#grabber-743-released","title":"Grabber 7.4.3 released","text":"<p>Grabber 7.4.3 has been released.</p> <p>The list of changes and download links can be found on GitHub: https://github.com/Bionus/imgbrd-grabber/releases/tag/v7.4.3</p>"},{"location":"blog/2021/03/25/grabber-750-released.html","title":"Grabber 7.5.0 released","text":""},{"location":"blog/2021/03/25/grabber-750-released.html#grabber-750-released","title":"Grabber 7.5.0 released","text":"<p>Grabber 7.5.0 has been released.</p> <p>The list of changes and download links can be found on GitHub: https://github.com/Bionus/imgbrd-grabber/releases/tag/v7.5.0</p>"},{"location":"blog/2021/03/26/grabber-751-released.html","title":"Grabber 7.5.1 released","text":""},{"location":"blog/2021/03/26/grabber-751-released.html#grabber-751-released","title":"Grabber 7.5.1 released","text":"<p>Grabber 7.5.1 has been released.</p> <p>The list of changes and download links can be found on GitHub: https://github.com/Bionus/imgbrd-grabber/releases/tag/v7.5.1</p>"},{"location":"blog/2021/07/05/grabber-760-released.html","title":"Grabber 7.6.0 released","text":""},{"location":"blog/2021/07/05/grabber-760-released.html#grabber-760-released","title":"Grabber 7.6.0 released","text":"<p>Grabber 7.6.0 has been released.</p> <p>The list of changes and download links can be found on GitHub: https://github.com/Bionus/imgbrd-grabber/releases/tag/v7.6.0</p>"},{"location":"blog/2021/08/24/grabber-761-released.html","title":"Grabber 7.6.1 released","text":""},{"location":"blog/2021/08/24/grabber-761-released.html#grabber-761-released","title":"Grabber 7.6.1 released","text":"<p>Grabber 7.6.1 has been released.</p> <p>The list of changes and download links can be found on GitHub: https://github.com/Bionus/imgbrd-grabber/releases/tag/v7.6.1</p>"},{"location":"blog/2021/09/02/grabber-762-released.html","title":"Grabber 7.6.2 released","text":""},{"location":"blog/2021/09/02/grabber-762-released.html#grabber-762-released","title":"Grabber 7.6.2 released","text":"<p>Grabber 7.6.2 has been released.</p> <p>The list of changes and download links can be found on GitHub: https://github.com/Bionus/imgbrd-grabber/releases/tag/v7.6.2</p>"},{"location":"blog/2021/12/26/grabber-770-released.html","title":"Grabber 7.7.0 released","text":""},{"location":"blog/2021/12/26/grabber-770-released.html#grabber-770-released","title":"Grabber 7.7.0 released","text":"<p>Grabber 7.7.0 has been released.</p> <p>The list of changes and download links can be found on GitHub: https://github.com/Bionus/imgbrd-grabber/releases/tag/v7.7.0</p>"},{"location":"blog/2022/01/08/grabber-771-released.html","title":"Grabber 7.7.1 released","text":""},{"location":"blog/2022/01/08/grabber-771-released.html#grabber-771-released","title":"Grabber 7.7.1 released","text":"<p>Grabber 7.7.1 has been released.</p> <p>The list of changes and download links can be found on GitHub: https://github.com/Bionus/imgbrd-grabber/releases/tag/v7.7.1</p>"},{"location":"blog/2022/03/26/grabber-780-released.html","title":"Grabber 7.8.0 released","text":""},{"location":"blog/2022/03/26/grabber-780-released.html#grabber-780-released","title":"Grabber 7.8.0 released","text":"<p>Grabber 7.8.0 has been released.</p> <p>The list of changes and download links can be found on GitHub: https://github.com/Bionus/imgbrd-grabber/releases/tag/v7.8.0</p>"},{"location":"blog/2022/04/20/grabber-781-released.html","title":"Grabber 7.8.1 released","text":""},{"location":"blog/2022/04/20/grabber-781-released.html#grabber-781-released","title":"Grabber 7.8.1 released","text":"<p>Grabber 7.8.1 has been released.</p> <p>The list of changes and download links can be found on GitHub: https://github.com/Bionus/imgbrd-grabber/releases/tag/v7.8.1</p>"},{"location":"blog/2022/06/06/grabber-790-released.html","title":"Grabber 7.9.0 released","text":""},{"location":"blog/2022/06/06/grabber-790-released.html#grabber-790-released","title":"Grabber 7.9.0 released","text":"<p>Grabber 7.9.0 has been released.</p> <p>The list of changes and download links can be found on GitHub: https://github.com/Bionus/imgbrd-grabber/releases/tag/v7.9.0</p>"},{"location":"blog/2022/07/16/grabber-791-released.html","title":"Grabber 7.9.1 released","text":""},{"location":"blog/2022/07/16/grabber-791-released.html#grabber-791-released","title":"Grabber 7.9.1 released","text":"<p>Grabber 7.9.1 has been released.</p> <p>The list of changes and download links can be found on GitHub: https://github.com/Bionus/imgbrd-grabber/releases/tag/v7.9.1</p>"},{"location":"blog/2022/12/16/grabber-7100-released.html","title":"Grabber 7.10.0 released","text":""},{"location":"blog/2022/12/16/grabber-7100-released.html#grabber-7100-released","title":"Grabber 7.10.0 released","text":"<p>Grabber 7.10.0 has been released.</p> <p>The list of changes and download links can be found on GitHub: https://github.com/Bionus/imgbrd-grabber/releases/tag/v7.10.0</p>"},{"location":"blog/2023/01/07/grabber-7101-released.html","title":"Grabber 7.10.1 released","text":""},{"location":"blog/2023/01/07/grabber-7101-released.html#grabber-7101-released","title":"Grabber 7.10.1 released","text":"<p>Grabber 7.10.1 has been released.</p> <p>The list of changes and download links can be found on GitHub: https://github.com/Bionus/imgbrd-grabber/releases/tag/v7.10.1</p>"},{"location":"blog/2023/06/05/grabber-7110-released.html","title":"Grabber 7.11.0 released","text":""},{"location":"blog/2023/06/05/grabber-7110-released.html#grabber-7110-released","title":"Grabber 7.11.0 released","text":"<p>Grabber 7.11.0 has been released.</p> <p>The list of changes and download links can be found on GitHub: https://github.com/Bionus/imgbrd-grabber/releases/tag/v7.11.0</p>"},{"location":"blog/2023/06/25/grabber-7111-released.html","title":"Grabber 7.11.1 released","text":""},{"location":"blog/2023/06/25/grabber-7111-released.html#grabber-7111-released","title":"Grabber 7.11.1 released","text":"<p>Grabber 7.11.1 has been released.</p> <p>The list of changes and download links can be found on GitHub: https://github.com/Bionus/imgbrd-grabber/releases/tag/v7.11.1</p>"},{"location":"blog/2023/07/23/grabber-7112-released.html","title":"Grabber 7.11.2 released","text":""},{"location":"blog/2023/07/23/grabber-7112-released.html#grabber-7112-released","title":"Grabber 7.11.2 released","text":"<p>Grabber 7.11.2 has been released.</p> <p>The list of changes and download links can be found on GitHub: https://github.com/Bionus/imgbrd-grabber/releases/tag/v7.11.2</p>"},{"location":"blog/2023/08/18/new-docs.html","title":"New docs","text":""},{"location":"blog/2023/08/18/new-docs.html#new-docs","title":"New docs","text":"<p>Hello everyone!</p> <p> </p> <p>The documentation website for Grabber now has a new look!</p> <p>I felt that the old look led to many people simply not reading the docs, and the navigation wasn't all that intuitive.</p> <p>The documentation website, as well as the homepage and blog, are now based on the excellent MkDocs Material. It allows for not only easier-to-read docs, but also easier-to-write documentation! Hopefully this will lead to less confused users.</p> <p>Some new features include:</p> <ul> <li>A better theme</li> <li>A search input</li> <li>Table of contents navigation on the right</li> <li>A dark/light mode switch</li> </ul> <p>For those that did not have the chance to see the previous look, here is a before and after of the homepage:</p> <p> </p> <p>Thanks again to everyone using and supporting Grabber every day!</p> <p> </p> <p>Best, Bionus</p>"},{"location":"blog/2024/05/12/grabber-7120-released.html","title":"Grabber 7.12.0 released","text":""},{"location":"blog/2024/05/12/grabber-7120-released.html#grabber-7120-released","title":"Grabber 7.12.0 released","text":"<p>Grabber 7.12.0 has been released.</p> <p>The list of changes and download links can be found on GitHub: https://github.com/Bionus/imgbrd-grabber/releases/tag/v7.12.0</p>"},{"location":"blog/2024/05/12/grabber-7121-released.html","title":"Grabber 7.12.1 released","text":""},{"location":"blog/2024/05/12/grabber-7121-released.html#grabber-7121-released","title":"Grabber 7.12.1 released","text":"<p>Grabber 7.12.1 has been released.</p> <p>The list of changes and download links can be found on GitHub: https://github.com/Bionus/imgbrd-grabber/releases/tag/v7.12.1</p>"},{"location":"blog/2024/05/14/grabber-7122-released.html","title":"Grabber 7.12.2 released","text":""},{"location":"blog/2024/05/14/grabber-7122-released.html#grabber-7122-released","title":"Grabber 7.12.2 released","text":"<p>Grabber 7.12.2 has been released.</p> <p>The list of changes and download links can be found on GitHub: https://github.com/Bionus/imgbrd-grabber/releases/tag/v7.12.2</p>"},{"location":"blog/2025/01/11/grabber-7130-released.html","title":"Grabber 7.13.0 released","text":""},{"location":"blog/2025/01/11/grabber-7130-released.html#grabber-7130-released","title":"Grabber 7.13.0 released","text":"<p>Grabber 7.13.0 has been released.</p> <p>The list of changes and download links can be found on GitHub: https://github.com/Bionus/imgbrd-grabber/releases/tag/v7.13.0</p>"},{"location":"docs/index.html","title":"Getting started","text":""},{"location":"docs/index.html#installation","title":"Installation","text":"<ul> <li>Install steps for Windows</li> <li>Install steps for Linux</li> <li>Install steps for macOS</li> <li>Install steps for Android</li> </ul>"},{"location":"docs/index.html#usage","title":"Usage","text":""},{"location":"docs/index.html#first-launch","title":"First launch","text":"<p>When you first start the program, you should be welcomed with this window:</p> <p></p> <p>There are four fields to fill:</p> <ul> <li>Language: the interface language</li> <li>Source: the source you want to try first, you can change it later, and even select more than one at a time</li> <li>Folder: where you want to store your images</li> <li>Filename: the biggest strength of Grabber is its filename formatting! See the Filename documentation page for more details. The default value of <code>%md5%.%ext%</code> should be good at first.</li> </ul> <p>Once finished, you can press the \"OK\" button.</p> <p>Note</p> <p>If you have ignored the window that opened at first launch, you can set these settings in \"Edit &gt; Options\". Then, go the the \"Save\" part. Set the \"Folder\" and the \"Filename\" fields (it is in a subpart of the \"Save\" part, you may need to expand it).</p> <p>You should now be seeing something like this:</p> <p></p>"},{"location":"docs/index.html#searching","title":"Searching","text":"<p>The upper part of the window is \"divided\" into two sections:</p> <ul> <li>The search form: to make searches using tags. To insert a date, or access advanced features, you can click the \"Plus\" button. You can also browse other pages by changing the page value on the right.</li> <li>Hidden form: you can show it by clicking the \"+\" button. Here, you have some fields to quickly change the settings (images per page and columns), the sources, and \"Post-filtering\". Post-filtering allows you, for example, to bypass the two-tags limitation of Danbooru by adding additional tags or meta (source, id, height, etc.) in this field. Note that none of these fields will be saved upon exiting. So if you want Grabber to remember your changes to the number of images per page or columns for example, you should change them directly in the options.</li> </ul> <p>After searching for something, you should see something as:</p> <p></p>"},{"location":"docs/index.html#downloading","title":"Downloading","text":""},{"location":"docs/index.html#batch-downloads","title":"Batch downloads","text":"<p>To download a lot of pictures at the same time, first search for the tag you want to download (or no tag if that's what you want). You should arrive on the search page. From here, just click \"Get this page\" to download all the images on the page you are currently seeing (usually around 20 images), or \"Get all\" to download all the results of your search, including further pages (can go from 1 image to thousands).</p> <p>Then, go to the \"Downloads\" tab to see a summary of what will be downloaded:</p> <p></p> <p>Once you are satisfied with your download list, click the \"Download\" button to start the download. The Batch Download window should appear:</p> <p></p> <p>It lists all the images that will be or have already been downloaded. Now, you just have to wait. When all images are downloaded, the program will show you a summary:</p> <p></p> <p>Success!</p>"},{"location":"docs/index.html#single-images","title":"Single images","text":"<p>To download single images, you have to \"Ctrl + click\" the images you want to download in the search window. They should then be marked in blue.</p> <p></p> <p>Once you have selected all the images you want to download, click the \"Get selected\" button. It will mark these images to be downloaded in the \"Downloads\" tab:</p> <p></p> <p>Once you are satisfied with your download list, click the \"Download\" button.</p>"},{"location":"docs/index.html#sources","title":"Sources","text":""},{"location":"docs/index.html#basic-usage","title":"Basic usage","text":"<p>If you want to change the source of the pictures, just click the \"Sources button\" at the bottom of the window:</p> <p></p> <p>Here, you just have to check the sources you want and then click \"OK\".</p>"},{"location":"docs/index.html#multiple-sources","title":"Multiple sources","text":"<p>If you select multiple sources, they will be put in one column by default. You can change this behavior by editing the \"Columns\" settings in the options.</p> <p>Note that you can also merge all results to remove duplicates by checking the \"Merge results\" option at the bottom of the window. It is useful if you browse from sites that mirror each other, while still having their uploaders.</p>"},{"location":"docs/index.html#logging-in","title":"Logging in","text":"<p>Some sources (for example Danbooru or Gelbooru) require login to enable full API access. Even though it is usually not mandatory thanks to the regex fallback, it is usually strongly advised to do so.</p> <p>To log into a source using an account, just enter your credentials in the \"Credentials\" tab of the Source Settings window:</p> <p></p> <p>When you're done, you can click the \"Test\" button to check if your credentials are correct. Note that not all sources support login checking.</p> <p></p> <p>Success!</p>"},{"location":"docs/cli.html","title":"Command-line interface","text":""},{"location":"docs/cli.html#introduction","title":"Introduction","text":"<p>Starting 4.0.0 version, Grabber can be run through the command line.</p> <p>Windows and CLI applications</p> <p>Windows apps cannot both have a GUI and print to the console easily. So if you try to use <code>Grabber.exe</code>, even with the <code>-c</code> flag, you will not see any output in your console. You can use the <code>Grabber.com</code> binary or the <code>Grabber</code> shorthand instead (the <code>COM</code> extension has a higher priority than <code>EXE</code>).</p>"},{"location":"docs/cli.html#usage","title":"Usage","text":"<p>There are a few ways to use the command line.</p> <ol> <li>When compiling Grabber, just build the <code>cli</code> target. It will generate a CLI-only program.</li> <li>When compiling Grabber, define the <code>USE_CLI</code> variable to set the CLI to be the default behavior. The downside is that running it in GUI mode with the <code>-g</code> or <code>--gui</code> flag will pop up a console too if not run from a terminal already.</li> <li>If you use the precompiled version, Grabber will start with its GUI by default, but this can be disabled with the <code>-c</code> or <code>--cli</code> option.</li> <li>On Windows, there is also a <code>Grabber.com</code> binary provided, which is a CLI-only version of the program.</li> </ol>"},{"location":"docs/cli.html#commands","title":"Commands","text":"<p>In this part, I'll consider that you are using the pre-compiled version, which requires the use of the <code>-c</code> or <code>--cli</code> option.</p>"},{"location":"docs/cli.html#help","title":"Help","text":"<p>You can find help with the <code>-h</code> or <code>--help</code> argument (on Windows, <code>-?</code> is also available).</p>"},{"location":"docs/cli.html#sources","title":"Sources","text":"<p>You can set a source using the <code>-s</code> or <code>--sources</code> parameter, followed by the list of hosts to connect, separated by spaces. For example: </p><pre><code>./grabber -c -s \"danbooru.donmai.us gelbooru.com\"\n</code></pre><p></p>"},{"location":"docs/cli.html#examples","title":"Examples","text":""},{"location":"docs/cli.html#count-the-number-of-images","title":"Count the number of images","text":"<p>Prints the result followed by a new line to stdout. </p><pre><code>./grabber -c -t \"inugami_kira\" -s \"danbooru.donmai.us\" --return-count\n288\n\n./grabber -c -t \"inugami_kira\" -s \"gelbooru.com\" --return-count\n297\n\n./grabber -c -t \"inugami_kira\" -s \"danbooru.donmai.us gelbooru.com\" --return-count\n585\n</code></pre><p></p>"},{"location":"docs/cli.html#get-tags","title":"Get tags","text":"<p>Prints each result separated by a new line. Each part is separated by a tabulation character. </p><pre><code>./grabber -c -t \"inugami_kira\" -s \"danbooru.donmai.us\" --return-tags\ninugami_kira    288     artist\nhighres 458000  general\n1girl   1090000 general\nabsurdres       87000   general\nthighhighs      257000  general\n...\n\n./grabber -c -t \"inugami_kira\" -s \"danbooru.donmai.us gelbooru.com\" --return-tags\ninugami_kira    585     artist\nhighres 1078790 general\n1girl   1736509 general\nabsurdres       203970  general\nthighhighs      613879  general\n...\n</code></pre><p></p>"},{"location":"docs/cli.html#get-images","title":"Get images","text":""},{"location":"docs/cli.html#basis","title":"Basis","text":"<p>Prints each result separated by a new line. </p><pre><code>./grabber -c -t \"inugami_kira\" -s \"danbooru.donmai.us\" -i 5 -p 3 --return-images\nhttps://cdn.donmai.us/original/10/d3/10d3ae95f0f5b7ea65cd3f07e541cfdf.png\nhttps://cdn.donmai.us/original/36/12/3612d866e07f13d632132c99f704fc57.png\nhttps://cdn.donmai.us/original/87/66/8766a8dad81082c631fbcb25328029e4.png\nhttps://cdn.donmai.us/original/a8/20/a820e3967048b0d7c7a197de748d7505.png\nhttps://cdn.donmai.us/original/85/ba/85ba43a3470236f16807d102ebb9befe.png\n\n./grabber -c -t \"inugami_kira\" -s \"gelbooru.com\" -i 5 -p 3 --return-images\nhttps://img3.gelbooru.com/images/87/66/8766a8dad81082c631fbcb25328029e4.png\nhttps://img3.gelbooru.com/images/36/12/3612d866e07f13d632132c99f704fc57.png\nhttps://img3.gelbooru.com/images/10/d3/10d3ae95f0f5b7ea65cd3f07e541cfdf.png\nhttps://img3.gelbooru.com/images/7a/3f/7a3fa58e9e669c2fdc2fb6596e13ed40.png\nhttps://img3.gelbooru.com/images/ee/a3/eea3d1e72f2f33521ccf68874b408d38.png\n\n./grabber -c -t \"inugami_kira\" -s \"danbooru.donmai.us gelbooru.com\" -i 5 -p 3 --return-images\nhttps://cdn.donmai.us/original/10/d3/10d3ae95f0f5b7ea65cd3f07e541cfdf.png\nhttps://cdn.donmai.us/original/36/12/3612d866e07f13d632132c99f704fc57.png\nhttps://cdn.donmai.us/original/87/66/8766a8dad81082c631fbcb25328029e4.png\nhttps://cdn.donmai.us/original/a8/20/a820e3967048b0d7c7a197de748d7505.png\nhttps://cdn.donmai.us/original/85/ba/85ba43a3470236f16807d102ebb9befe.png\nhttps://img3.gelbooru.com/images/87/66/8766a8dad81082c631fbcb25328029e4.png\nhttps://img3.gelbooru.com/images/36/12/3612d866e07f13d632132c99f704fc57.png\nhttps://img3.gelbooru.com/images/10/d3/10d3ae95f0f5b7ea65cd3f07e541cfdf.png\nhttps://img3.gelbooru.com/images/7a/3f/7a3fa58e9e669c2fdc2fb6596e13ed40.png\nhttps://img3.gelbooru.com/images/ee/a3/eea3d1e72f2f33521ccf68874b408d38.png\n</code></pre><p></p>"},{"location":"docs/cli.html#duplicates","title":"Duplicates","text":"<p>You can use the \"-n\" or \"--no-duplicates\" option to remove duplicate results when downloading from several sources based on MD5. </p><pre><code>./grabber -c -t \"inugami_kira\" -s \"danbooru.donmai.us gelbooru.com\" -i 5 -p 3 --return-images --no-duplicates\nhttps://cdn.donmai.us/original/10/d3/10d3ae95f0f5b7ea65cd3f07e541cfdf.png\nhttps://cdn.donmai.us/original/36/12/3612d866e07f13d632132c99f704fc57.png\nhttps://cdn.donmai.us/original/87/66/8766a8dad81082c631fbcb25328029e4.png\nhttps://cdn.donmai.us/original/a8/20/a820e3967048b0d7c7a197de748d7505.png\nhttps://cdn.donmai.us/original/85/ba/85ba43a3470236f16807d102ebb9befe.png\nhttps://img3.gelbooru.com/images/7a/3f/7a3fa58e9e669c2fdc2fb6596e13ed40.png\nhttps://img3.gelbooru.com/images/ee/a3/eea3d1e72f2f33521ccf68874b408d38.png\n</code></pre><p></p>"},{"location":"docs/cli.html#images-per-page","title":"Images per page","text":"<p>You can use the \"-i\" or \"--perpage\" option to choose how many images per page the program should return. The default value is 20.</p> <p>You can use the \"-m\" or \"--max\" option to choose how many images you want to return. By default, the program returns everything it finds on the requested pages.</p> <p>Mixed together, they can allow you to get multiple pages for a single request. For example, \"-i 2 -m 10\" will return the same result as \"-i 10\", but will use 5 requests to do so. </p><pre><code>./grabber -c -t \"inugami_kira\" -s \"danbooru.donmai.us\" -i 10 --return-images\nhttps://cdn.donmai.us/original/3f/cc/3fccf5d7c6a0fe066cb0c6d3d584dba4.png\nhttps://cdn.donmai.us/original/92/bd/92bde7d2b5b5b045e3d03e2544499f4b.png\nhttps://cdn.donmai.us/original/27/de/27de992712f6bae5c03357cf4e63ea0a.png\nhttps://cdn.donmai.us/original/34/12/3412be9340651fe39c09bc1405d4b9c2.png\nhttps://cdn.donmai.us/original/86/1e/861e7414086026f3f1d3dfe11dfe9237.png\nhttps://cdn.donmai.us/original/eb/35/eb35c0dee3e05ffeda18eba4917c33ff.png\nhttps://cdn.donmai.us/original/09/2d/092d892110825a6cbdf1bde24241c030.png\nhttps://cdn.donmai.us/original/da/cd/dacde25c81be108389854c32f1bdeb3d.png\nhttps://cdn.donmai.us/original/10/0c/100cd43adb60f390309d14c1ce8bb853.png\nhttps://cdn.donmai.us/original/7a/3f/7a3fa58e9e669c2fdc2fb6596e13ed40.png\n\n./grabber -c -t \"inugami_kira\" -s \"danbooru.donmai.us\" -i 2 -m 10 --return-images\nhttps://cdn.donmai.us/original/3f/cc/3fccf5d7c6a0fe066cb0c6d3d584dba4.png\nhttps://cdn.donmai.us/original/92/bd/92bde7d2b5b5b045e3d03e2544499f4b.png\nhttps://cdn.donmai.us/original/27/de/27de992712f6bae5c03357cf4e63ea0a.png\nhttps://cdn.donmai.us/original/34/12/3412be9340651fe39c09bc1405d4b9c2.png\nhttps://cdn.donmai.us/original/86/1e/861e7414086026f3f1d3dfe11dfe9237.png\nhttps://cdn.donmai.us/original/eb/35/eb35c0dee3e05ffeda18eba4917c33ff.png\nhttps://cdn.donmai.us/original/09/2d/092d892110825a6cbdf1bde24241c030.png\nhttps://cdn.donmai.us/original/da/cd/dacde25c81be108389854c32f1bdeb3d.png\nhttps://cdn.donmai.us/original/10/0c/100cd43adb60f390309d14c1ce8bb853.png\nhttps://cdn.donmai.us/original/7a/3f/7a3fa58e9e669c2fdc2fb6596e13ed40.png\n</code></pre><p></p>"},{"location":"docs/cli.html#get-tags-list","title":"Get tags list","text":""},{"location":"docs/cli.html#basis_1","title":"Basis","text":"<p>Prints each result separated by a new line. </p><pre><code>./grabber -c -s \"danbooru.donmai.us\" -i 5 --return-pure-tags\ntsukimare_mitsuki       1       artist\npukapukapukka2007       1       artist\naria1211        1       artist\nksnatc-t_am     1       artist\njoyacuson       1       artist\n</code></pre><p></p>"},{"location":"docs/cli.html#count-filter","title":"Count filter","text":"<p>You can use the \"--tm\" or \"--tags-min\" to return only tags with a count superior or equal to this option. </p><pre><code>./grabber -c -s \"danbooru.donmai.us\" -i 100 --tags-min 10 --return-pure-tags\nemererre        10      artist\nhitsuji_(hitsuji_kikaku)        12      artist\nhitomi_(pokemon_ranger) 11      character\nseneo   41      artist\n</code></pre><p></p>"},{"location":"docs/cli.html#tags-format","title":"Tags format","text":"<p>You can use the \"--tf\" or \"--tags-format\" to change the format tags are returned.</p> <p>Available replacements are \"%tag\", \"%count\", \"%type\" and \"%stype\".</p> <p>The default value is \"%tag\\t%count\\t%type\" </p><pre><code>./grabber -c -s \"danbooru.donmai.us\" -i 100 --tags-format \"%stype %tag (%count)\" --tags-min 10 --return-pure-tags\n1 emererre (10)\n1 hitsuji_(hitsuji_kikaku) (12)\n4 hitomi_(pokemon_ranger) (11)\n1 seneo (41)\n</code></pre><p></p>"},{"location":"docs/cli.html#examples_1","title":"Examples","text":""},{"location":"docs/cli.html#update-the-auto-completion-list-manually","title":"Update the auto-completion list manually","text":"<p>Note that this is long and very constraining for the server. So please don't overdo it. The software already automatically updates the tag list as they arrive. This is just if you notice that many of your searched tags are not in the list.</p> <p>It can take a while (250 pages of 500ko each), so you might want to turn debugging on to see the current download status. </p><pre><code>./grabber -c -s \"danbooru.donmai.us\" -i 1000 -m 250000 --tags-format \"%tag\" --tags-min 10 --return-pure-tags &gt; tags.txt\n</code></pre><p></p>"},{"location":"docs/compilation.html","title":"Compilation","text":""},{"location":"docs/compilation.html#introduction","title":"Introduction","text":"<p>Tired of waiting for the next update? Want to get the latest developer version? Want to help on the program's development? You'll need to compile the program yourself.</p>"},{"location":"docs/compilation.html#windows","title":"Windows","text":""},{"location":"docs/compilation.html#dependencies","title":"Dependencies","text":"<p>Note</p> <p>Note that the compiler used for official builds is Visual Studio 2019. You can use MinGW or a more recent version of MSVC if it works for you. However, know that this is the one used in official releases.</p> <p>Bullets marked with <code>*</code> are mandatory, other are optional.</p> <ul> <li><code>*</code> Qt 6.6 or higher</li> <li><code>*</code> A C++ compiler such as MSVC 2019</li> <li><code>*</code> CMake 3.2 or higher</li> <li><code>*</code> Node.js (for building images sources)</li> <li>QScintilla2 (for syntax highlighting in JavaScript filename window)</li> <li>Google Breakpad (to handle crash and show a nice-looking crash window and backup traces)</li> </ul>"},{"location":"docs/compilation.html#instructions","title":"Instructions","text":""},{"location":"docs/compilation.html#qt","title":"Qt","text":"<p>You can find the Qt installer here: https://www.qt.io/download-qt-installer</p> <p>Just download and install.</p>"},{"location":"docs/compilation.html#msvc","title":"MSVC","text":"<p>You can use the free Visual Studio Community version to compile (note that only the compiler is required). You can find it here: https://www.visualstudio.com/downloads/</p> <p>Just download and install.</p>"},{"location":"docs/compilation.html#nodejs","title":"Node.js","text":"<p>You can find it here: https://nodejs.org/en/download/</p> <p>Just download and install.</p>"},{"location":"docs/compilation.html#qscintilla","title":"QScintilla","text":"<p>If you don't want to use QScintilla, edit the \"src/gui/CMakeLists.txt\" file and change the line <code>set(USE_QSCINTILLA 1)</code> into <code>set(USE_QSCINTILLA 0)</code>.</p> <p>Otherwise, you can find it here: http://www.riverbankcomputing.com/software/qscintilla/download</p> <ol> <li>Download</li> <li>Open the Qt command prompt (you can find it in the start menu)</li> <li>Add Visual Studio compiler to the path by typing \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Auxiliary\\Build\\vcvarsall.bat\" (with quotes, else it will give you an error message on \"C:\\Program\") in the prompt</li> <li>Browse to where you extracted QScintilla using the <code>cd</code> command (for example, <code>cd C:\\Users\\Bionus\\Desktop\\QScintilla-gpl-2.7.2</code>). If it's on another hard drive, use the <code>cd /D</code> command</li> <li>Type <code>cd src</code></li> <li>Type <code>qmake qscintilla.pro</code></li> <li>Type <code>nmake</code></li> <li>Type <code>nmake install</code></li> <li>The DLL files should now have been installed and the headers added to Qt</li> </ol>"},{"location":"docs/compilation.html#google-breakpad","title":"Google Breakpad","text":"<p>If you don't want to use Google Breakpad, edit the \"src/gui/CMakeLists.txt\" file and change the line <code>set(USE_BREAKPAD 1)</code> into <code>set(USE_BREAKPAD 0)</code>.</p> <p>If you want to use it, I won't explain here how to configure it to work with Qt, as it's a pretty complicated task.</p> <ol> <li>Open \"src/gui/CMakeLists.txt\"</li> <li>Edit the <code>set(BREAKPAD \"D:/bin/google-breakpad\")</code> line to match where you cloned Google Breakpad</li> </ol>"},{"location":"docs/compilation.html#linux","title":"Linux","text":"<p>Info</p> <p>You can just run <code>./build.sh</code> at the root of the repository, and it will build everything for you.</p>"},{"location":"docs/compilation.html#dependencies_1","title":"Dependencies","text":"<p>Bullets marked with <code>*</code> are mandatory, other are optional.</p> <ul> <li><code>*</code> Qt 6.6 or higher</li> <li><code>*</code> A C++ compiler such as g++</li> <li><code>*</code> CMake 3.2 or higher</li> <li><code>*</code> Node.js (for building images sources)</li> <li>OpenSSL (for HTTPS websites)</li> <li>QScintilla2 (for syntax highlighting in JavaScript filename window)</li> <li>Google Breakpad (to handle crash and show a nice-looking crash window and backup traces)</li> </ul>"},{"location":"docs/compilation.html#instructions_1","title":"Instructions","text":""},{"location":"docs/compilation.html#qt_1","title":"Qt","text":"<p>Most Linux package managers do not provide up-to-date Qt packages. As such, it is recommended to either use aqtinstall, or a third-party repository.</p> <pre><code>pip install aqtinstall\naqt install-qt linux desktop 6.6.3 gcc_64 -m qtmultimedia qtimageformats qtnetworkauth qtshadertools\n</code></pre>"},{"location":"docs/compilation.html#compiler","title":"Compiler","text":"<p>You can use the g++ compiler to compile the program. If it's not already installed, the process may vary depending on your Linux distribution. Note that you can also replace g++ with clang if you want, but make sure to use the proper Qt version for your compiler.</p> <p>You'll also need <code>cmake</code> for the makefile generation, and <code>make</code> for executing it.</p> <p>You can install both using a package manager, such as <code>apt</code>: </p><pre><code>sudo apt install -y \"g++\" \"cmake\" \"make\"\n</code></pre><p></p> <p>Or if you're using Fedora: </p><pre><code>sudo dnf install -y \"gcc-c++\" \"cmake\" \"make\" --best\n</code></pre><p></p>"},{"location":"docs/compilation.html#nodejs_1","title":"Node.js","text":"<p>Usually found in packages managers by the name <code>node</code> or <code>nodejs</code>. You can refer to the official docs:</p> <p>https://nodejs.org/en/download/package-manager/</p>"},{"location":"docs/compilation.html#openssl","title":"OpenSSL","text":"<p>If you want to access HTTPS websites, you'll need the OpenSSL libraries.</p> <p>They're usually found in packages managers by the name <code>libssl-dev</code>.</p>"},{"location":"docs/compilation.html#qscintilla_1","title":"QScintilla","text":"<p>If you don't want to use QScintilla, edit the \"src/gui/CMakeLists.txt\" file and change the line <code>set(USE_QSCINTILLA 1)</code> into <code>set(USE_QSCINTILLA 0)</code>.</p> <p>Otherwise, you can find it here: http://www.riverbankcomputing.com/software/qscintilla/download</p> <ol> <li>Download</li> <li>Open a terminal</li> <li>Browse to where you extracted QScintilla using the <code>cd</code> command (for example, <code>cd /home/Bionus/QScintilla-gpl-2.7.2</code>).</li> <li>Type <code>cd src</code></li> <li>Type <code>qmake qscintilla.pro</code></li> <li>Type <code>make</code></li> <li>Type <code>make install</code></li> <li>The shared libraries should now have been installed and the headers added to Qt</li> </ol>"},{"location":"docs/compilation.html#google-breakpad_1","title":"Google Breakpad","text":"<p>If you don't want to use Google Breakpad, edit the \"src/gui/CMakeLists.txt\" file and change the line <code>set(USE_BREAKPAD 1)</code> into <code>set(USE_BREAKPAD 0)</code>.</p> <p>If you want to use it, I won't explain here how to configure it to work with Qt, as it's a pretty complicated task.</p> <ol> <li>Open \"src/gui/CMakeLists.txt\"</li> <li>Edit the <code>set(BREAKPAD \"D:/bin/google-breakpad\")</code> line to match where you cloned Google Breakpad</li> </ol>"},{"location":"docs/compilation.html#building","title":"Building","text":"<pre><code>mkdir build\ncd build\ncmake ../src\nmake\ncd ..\n\nmv \"build/gui/Grabber\" \"release/\"\ntouch \"release/settings.ini\"\n</code></pre>"},{"location":"docs/compilation.html#troubleshooting","title":"Troubleshooting","text":"<p>If you compile the program and run it as-is, it may say something like \"no sources found\". The program requires to have a few files located at a specific place to run. Since this location depends on your system (usually ~/.Grabber), you can also just make the program portable by putting the binary alongside the following files/folders, all found in the \"release\" folder :</p> <ul> <li>sites/</li> <li>languages/</li> <li>words.txt (not required, used for tag autocompletion)</li> <li>settings.ini (if it doesn't exist, create it using <code>touch settings.ini</code></li> </ul> <p>Another option would be to simply move the binary to the \"release\" folder after the compilation.</p>"},{"location":"docs/compilation.html#raspberry-pi-raspbian","title":"Raspberry Pi (Raspbian)","text":""},{"location":"docs/compilation.html#preparations","title":"Preparations","text":"<p>Make sure that you are running Raspbian Stretch or newer on a Raspberry Pi 2 or Raspberry Pi 3. The compilation requires a lot of memory so make sure that you stop all unnecessary processes (i.e. Apache, MySQL, php-fpm) before starting the compilation. You may need to set memory-split to 16MB in raspi-config or increase your swap partition size. You only need to do this for the compilation and can switch back to the old values.</p> <p>You can choose between two different versions of Grabber. One is the release version, the other one the developer version. Simply download the one that suits your taste best.</p>"},{"location":"docs/compilation.html#download-files","title":"Download files","text":"<p>Release version: </p><pre><code>git clone https://github.com/Bionus/imgbrd-grabber.git\n</code></pre><p></p> <p>Developer version: </p><pre><code>git clone https://github.com/Bionus/imgbrd-grabber.git --single-branch -b develop\n</code></pre><p></p>"},{"location":"docs/compilation.html#compilation","title":"Compilation","text":"<pre><code>cd imgbrd-grabber\n./build.sh\n</code></pre> <p>You can now run your program from <code>/home/pi/imgbrd-grabber/release</code>.</p> <p>If you want to use the database-support of grabber, install one or all of these packages.</p> <pre><code>sudo apt install libqt5sql5-mysql\nsudo apt install libqt5sql5-odbc\nsudo apt install libqt5sql5-psql\n</code></pre>"},{"location":"docs/compilation.html#macos","title":"macOS","text":""},{"location":"docs/compilation.html#instructions_2","title":"Instructions","text":""},{"location":"docs/compilation.html#qt_2","title":"Qt","text":"<ol> <li>Install Xcode (https://itunes.apple.com/us/app/xcode/id497799835?mt=12).</li> <li> <p>Open Terminal and run this code to install Homebrew, a package manager:</p> <pre><code>ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n</code></pre> </li> <li> <p>Install QT5 with brew.</p> <pre><code>brew install qt6\n</code></pre> </li> <li> <p>Edit <code>~/.bash_profile</code> and add the following line: </p> <p></p><pre><code>export PATH=\"/usr/local/Cellar/qt6/6.6.3/bin\"\n</code></pre> This is the default path to your QT installation. Be sure to update the version number, or it won't work!<p></p> </li> </ol>"},{"location":"docs/compilation.html#compiler_1","title":"Compiler","text":"<p>You can use the g++ compiler to compile the program. If it's not already installed, you can easily do so using the Homebrew package manager.</p> <pre><code>brew install gcc\n</code></pre>"},{"location":"docs/compilation.html#running","title":"Running","text":"<p>If you compile the program and run it as-is, it may say something like \"no sources found\". The program requires to have a few files located at a specific place to run. You can make the program portable by moving the following files/folders to <code>Grabber.app/contents/MacOS/</code>. Each of these items can be found in the \"release\" folder:</p> <ul> <li>sites/</li> <li>languages/</li> <li>words.txt (not required, used for tag autocompletion)</li> <li>settings.ini (if it doesn't exist, create it using <code>touch settings.ini</code></li> </ul>"},{"location":"docs/compilation.html#all-commands","title":"All commands","text":"<pre><code>appDir=./gui/build/release/Grabber.app/Contents/MacOS\n\nruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\nbrew install qt6\nbrew install gcc\nbrew install cmake\n\nmkdir build\ncd build\ncmake ..\nmake\ncd ..\n\nmv build/gui/gui.app release/Grabber.app\ncp -r ./release/* $appDir\ntouch $appDir/settings.ini\n</code></pre>"},{"location":"docs/configuration-files.html","title":"Configuration files","text":""},{"location":"docs/configuration-files.html#location","title":"Location","text":""},{"location":"docs/configuration-files.html#windows","title":"Windows","text":"<pre><code>C:\\Users\\%USERNAME%\\AppData\\Local\\Bionus\\Grabber\n</code></pre>"},{"location":"docs/configuration-files.html#linux","title":"Linux","text":"<pre><code>$HOME/.config/Bionus/Grabber\n</code></pre>"},{"location":"docs/configuration-files.html#files","title":"Files","text":"<p>Note</p> <p>The list below is not sorted by \"priority\" but alphabetically. Also, some files might not exist depending on your specific configuration.</p> <ul> <li><code>cache/</code>: temporary files for caching things such as HTTP requests</li> <li><code>sites/</code>: list of sources and sites (see Sources)</li> <li><code>themes/</code>: the installed themes (see Themes)</li> <li><code>thumbs/</code>: the thumbnails for favorite tags</li> <li><code>webservices/</code>: the icons for webservices</li> <li><code>blacklist.txt</code>: the ignored and blacklisted tags</li> <li><code>commands.log</code>: the log of commands (not SQL)</li> <li><code>commands.sql</code>: the log of SQL commands</li> <li><code>favorites.json</code>: the user's favorites</li> <li><code>filenamehistory.txt</code>: history of the \"filename\" quick edit field in the main window</li> <li><code>ignore.txt</code>: the \"ignored\" tags as set in the user settings</li> <li><code>main.log</code>: log of everything that happened in the current (or last) run of the program</li> <li><code>md5s.txt</code>: the database of already downloaded files</li> <li><code>md5s.sqlite</code>: the database of already downloaded files (beta SQLite format, see issue #2116)</li> <li><code>monitors.json</code>: the user's monitors</li> <li><code>restore.igl</code>: batch and single images downloads</li> <li><code>settings.ini</code>: contains the settings that are edited in the \"options\" window (so most of them)</li> <li><code>tabs.json</code>: the user's opened tabs</li> <li><code>viewitlater.txt</code>: the \"kept for later\" tags</li> <li><code>wordsc.txt</code>: tags automatically added to the auto-complete list, in addition to the <code>words.txt</code> file that can be found in the installation folder</li> </ul>"},{"location":"docs/duplicate-files.html","title":"Duplicate files","text":""},{"location":"docs/duplicate-files.html#already-existing-files","title":"Already existing files","text":"<p>When a file is downloaded, Grabber will first check if the same file already exists at the destination, using your configured Filename. If a file already exists with the same filename, Grabber will not download the file.</p> <p>That's why it's important to have a configured filename that generates a different paths for each image. Otherwise, you might have multiple images sharing the same path, and only one will be downloaded.</p> <p>For example, <code>%artist%.%ext%</code> will always generate the same name for different images from the same artist, causing collisions. As a result, only the first image will be downloaded and other ones will be skipped and counted as duplicates.</p>"},{"location":"docs/duplicate-files.html#the-md5-list","title":"The MD5 list","text":""},{"location":"docs/duplicate-files.html#introduction","title":"Introduction","text":"<p>To understand how the MD5 list works, you first have to know what is an MD5. For each image, we can generate a special code, called \"MD5\". A MD5 looks like <code>098f6bcd4621d373cade4e832627b4f6</code> and is unique to each image, as it corresponds to the contents of the image. So the same image, even on different websites, would always have the same MD5. You can learn more about hashing and MD5 on Wikipedia.</p> <p>Many sources that Grabber supports provide the MD5 of the image, which allows Grabber to know if you already downloaded the same image somewhere else, even if it was from a different website.</p>"},{"location":"docs/duplicate-files.html#configuration","title":"Configuration","text":"<p>So in addition to being able to not overwrite already existing files, Grabber stores a list of the MD5 codes of all images you've downloaded, to ensure you don't download twice the same image from different sources.</p> <p>There are two settings that control this behavior in Grabber, both located in the \"Save\" category of the settings:</p> <ul> <li>If a file already exists globally: if a file with the same MD5 has been downloaded by Grabber anywhere on your computer</li> <li>If it's in the same directory: if a file with the same MD5 has already been downloaded by Grabber in the same target directory as the image you're trying to save</li> </ul> <p>The available options for both of those settings are:</p> <ul> <li>Save: download and save the image twice (as if it were not a duplicate)</li> <li>Copy: save the image twice, but copy it from the original image to prevent a useless download</li> <li>Move: move the original image to the duplicate location (useful for example if you're re-downloading an image that has changed a few tags)</li> <li>Shortcut / Symbolic link: create a shortcut or symbolic link (depending on your platform) with the duplicate image's name, pointing to the original image (useful if you often have duplicates in different folders, with each folder having a useful meaning)</li> <li>Hard link: creates a hard link with the duplicate image's name, pointing to the original image (similar to a shortcut / symbolic link)</li> <li>Don't save: skip duplicate images</li> </ul>"},{"location":"docs/duplicate-files.html#deleted-files","title":"Deleted files","text":"<p>By default, if you delete a file from your computer after it was downloaded, it will also be removed from the MD5 list. Which means that if you try to download the same file again, from the same source or from another one, it will be downloaded again.</p> <p>If you want Grabber to \"remember\" that you already downloaded this file even if you deleted it, you can enable the \"Keep deleted files in the MD5 list\" setting in the \"Save\" category.</p>"},{"location":"docs/faq.html","title":"FAQ","text":""},{"location":"docs/faq.html#frequently-asked-questions","title":"Frequently Asked Questions","text":""},{"location":"docs/faq.html#how-to-login","title":"How to login?","text":"<p>See the Website login documentation page.</p>"},{"location":"docs/faq.html#how-to-make-the-program-portable","title":"How to make the program portable?","text":"<p>See the Portable version documentation page.</p>"},{"location":"docs/faq.html#where-are-the-settings-favorites-etc-stored","title":"Where are the settings, favorites, etc. stored?","text":"<p>See the Configuration files documentation page.</p>"},{"location":"docs/faq.html#how-can-i-filter-images-by-extension","title":"How can I filter images by extension?","text":"<p>You can use post-filters to achieve this result, if your source does not naturally support this feature.</p> <p>The <code>filetype</code> or <code>ext</code> token could be used (they're aliases of each other, and both contain the extension), for example <code>ext:png</code>, or <code>-ext:webm</code>.</p> <p>More info on the Search documentation page.</p>"},{"location":"docs/faq.html#why-are-multiple-tags-of-the-same-category-copyright-artist-etc-merged-in-the-filename","title":"Why are multiple tags of the same category (copyright, artist, etc.) merged in the filename?","text":"<p>Tag category have a special setting which decides what the behavior for multiple tags is.</p> <p>It can be found in \"Save &gt; Tags &gt; Category name\". Change it to something else than \"Replace all tags\" if you want a different behavior.</p>"},{"location":"docs/faq.html#how-to-avoid-duplicates","title":"How to avoid duplicates?","text":"<p>See the Duplicate files documentation page.</p>"},{"location":"docs/faq.html#why-do-i-get-a-message-saying-my-filename-is-not-unique","title":"Why do I get a message saying my filename is not unique?","text":"<p>This means that different images can end up having the same filename if you are not careful.</p> <p>Note that the message is a warning, and not an error. You are free to ignore it, you might just sometimes have duplicate filenames for your images, which will cause some images' download to be skipped.</p> <p>For example, the filename <code>%id%.%ext%</code> will generate this warning, because an ID in a given source will represent a different image on another one.</p> <p>See Duplicate files for more details.</p>"},{"location":"docs/faq.html#why-do-my-tags-have-spaces-between-words-instead-of-underscores","title":"Why do my tags have spaces between words instead of underscores?","text":"<p>There's a setting to control which separator is used for words in tags, whether it is a space () or an underscore (<code>_</code>).</p> <p>You can find this setting in \"Save &gt; Filename\", called \"Replace spaces by underscores\".</p> <p>Another option is to use the underscores modifier in your filename (such as <code>%all:underscores%</code>).</p>"},{"location":"docs/favorites.html","title":"Favorites","text":""},{"location":"docs/favorites.html#introduction","title":"Introduction","text":"<p>When you very often browse or download a certain tag and never want to miss any of its images, you may want to consider using the favorites tab. It allows you to never miss any new image that could have been posted.</p>"},{"location":"docs/favorites.html#adding-a-favorite","title":"Adding a favorite","text":""},{"location":"docs/favorites.html#from-a-search","title":"From a search","text":"<p>Just search the tag you want to add to your favorites, and then right-click the tags field, and choose \"Favorites &gt; Add\". Using this method, you can add favorites containing multiple tags: all tags currently being searched will be added as one favorite.</p>"},{"location":"docs/favorites.html#from-an-image","title":"From an image","text":"<p>If you opened an image window, just right-click the tag you want to add to your favorites and choose \"Add to favorites\".</p>"},{"location":"docs/favorites.html#removing-a-favorite","title":"Removing a favorite","text":""},{"location":"docs/favorites.html#from-a-search_1","title":"From a search","text":"<p>Just search the tag you want to remove from your favorites, and then right-click the tags field, and choose \"Favorites &gt; Remove\".</p>"},{"location":"docs/favorites.html#from-an-image_1","title":"From an image","text":"<p>If you opened an image window, just right-click the tag you want to remove from your favorites and choose \"Remove from favorites\".</p>"},{"location":"docs/favorites.html#from-the-favorites-tab","title":"From the favorites tab","text":"<p>Right-click a favorite to bring up its options, and then click the \"Delete\" button.</p>"},{"location":"docs/favorites.html#changing-the-favorites-image","title":"Changing the favorite's image","text":""},{"location":"docs/favorites.html#from-an-image_2","title":"From an image","text":"<p>If you opened an image window containing the favorite tag, just right-click this tag and choose \"Set image\". The current image will now be used as the favorite's image.</p>"},{"location":"docs/favorites.html#from-the-favorites-tab_1","title":"From the favorites tab","text":"<p>Right-click a favorite to bring up its options, and then click \"Browse\" to choose an image file. This file will then be used as the favorite's image.</p>"},{"location":"docs/favorites.html#using-the-favorites-tab","title":"Using the favorites tab","text":"<p>When you have added your favorites, just left-clicking will browse the last results for this favorite. When you are done seeing all the images, you can click the \"Mark as viewed\" button. Now all these images will be hidden in future searches for this favorite (it only applies in this tab: searching for the favorite in any other tab will display all the results normally). You can also mark all the favorites as viewed using the \"Mark all as viewed button\".</p> <p>If you clicked the button inadvertently, you can change the favorite's date manually in its options, which you can open right-clicking said favorite.</p>"},{"location":"docs/favorites.html#automatically-download-a-favorite","title":"Automatically download a favorite","text":"<p>To automatically download any new favorites, please follow the below steps:</p> <ol> <li>Go to the \"Favorites\" tab</li> <li>Right-click on the Favorite you would like to monitor</li> <li>Go to the \"Monitors\" tab</li> <li>Select the source to pull updated files from as well as an interval in minutes</li> </ol> <p>Note</p> <p>You can change the Path and Filename fields if needed, leaving blank will use your default path and filename.</p> <p></p>"},{"location":"docs/filename.html","title":"Filename","text":""},{"location":"docs/filename.html#introduction","title":"Introduction","text":"<p>If you want to download lots of images at the same time and have each of them be downloaded in a different location or have a different filename, you have to first tell the program which filename format to use.</p> <p>The program has many tokens to use to ensure different and unique filenames, you can find an exhaustive list below.</p> <p>The most basic tokens are <code>md5</code> (an image unique identifier across all websites), <code>id</code> (an image unique identifier on a given website), and <code>ext</code> (the image's extension). Each token should be written between percent signs (<code>%</code>) to differentiate it from plain text. So if you want to use the <code>md5</code> token in your filename, you have to write <code>%md5%</code>.</p>"},{"location":"docs/filename.html#examples","title":"Examples","text":"<p>The most basic unique filename is: </p><pre><code>%md5%.%ext%\n</code></pre><p></p> <p>Which would generate files such as:</p> <ul> <li><code>f7deda9c6934179779f63910d5e8d2dc.png</code></li> <li><code>a75b2e6c0b9247d04ff88c0aa02bb17a.gif</code></li> </ul> <p>A more complex one could be: </p><pre><code>%artist%/%copyright%/%character%/%md5%.%ext%\n</code></pre><p></p> <p>Which would generate files such as:</p> <ul> <li><code>namu (ratias7777)/sword art online/leafa/362333f4fb4c458577ee72919cfbe10d.png</code></li> <li><code>moneti (daifuku)/touhou/flandre scarlet/0498c78f67d5545bea731d4b1051096c.jpg</code></li> <li><code>moneti (daifuku)/touhou/izayoi sakuya/fe2e6eb294f33f455d43b3effcf4ec6c.jpg</code></li> </ul> <p>Note that here, each slash (<code>/</code>) corresponds to a different directory: </p><pre><code>\u251c\u2500\u2500 namu (ratias7777)\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 sword art online\n\u2502\u00a0\u00a0 \u00a0\u00a0  \u2514\u2500\u2500 leafa\n\u2502\u00a0\u00a0 \u00a0\u00a0  \u00a0\u00a0  \u2514\u2500\u2500 362333f4fb4c458577ee72919cfbe10d.png\n\u2514\u2500\u2500 moneti (daifuku)\n    \u2514\u2500\u2500 touhou\n        \u251c\u2500\u2500 flandre scarlet\n        \u2502\u00a0\u00a0 \u2514\u2500\u2500 0498c78f67d5545bea731d4b1051096c.jpg\n        \u2514\u2500\u2500 izayoi sakuya\n            \u2514\u2500\u2500 fe2e6eb294f33f455d43b3effcf4ec6c.jpg\n</code></pre><p></p>"},{"location":"docs/filename.html#available-tokens","title":"Available tokens","text":"<ul> <li><code>ext</code>: the file extension.</li> <li><code>artist</code></li> <li><code>copyright</code></li> <li><code>character</code></li> <li><code>model</code>: boorus such as Behoimi use, adding to classical type, the \"model\" type.</li> <li><code>general</code></li> <li><code>search</code>: the search that returned this image (as is).</li> <li><code>search_1</code>, <code>search_2</code>, <code>search_3</code>...: first/second/third... tag of the search.</li> <li><code>filename</code>: image filename, as stored on the booru's server.</li> <li><code>rating</code>: <code>safe</code>, <code>questionable</code>, <code>explicit</code>, or <code>unknown</code>.</li> <li><code>score</code></li> <li><code>md5</code>: the file's MD5 hash. If not returned by the server, it is generated automatically.</li> <li><code>id</code>: unique image ID per board.</li> <li><code>website</code>: the website's URL (without HTTP and trailing slash).</li> <li><code>websitename</code>: the website name as set in the sources' settings.</li> <li><code>height</code>: the image's height.</li> <li><code>width</code>: the image's width.</li> <li><code>mpixels</code>: the image's height multiplied by the image's width.</li> <li><code>author</code>: the name of the author of the image.</li> <li><code>authorid</code>: the ID of the author of the image.</li> <li><code>date</code>: the date the image was posted on the server, using the format \"MM-dd-yyyy HH.mm\".</li> <li><code>all</code>: all tags.</li> <li><code>allo</code>: do not use this unless you know what you're doing. It is the same as <code>%all%</code>, but without the removal of forbidden characters and any other kind of treatment (using it as a filename may cause some images to not save).</li> <li><code>source</code>: the source of this file, usually a URL.</li> <li><code>sources</code>: all sources for this file, usually a list of URLs.</li> <li><code>url_file</code>: the URL of that file.</li> <li><code>url_original</code>: the URL of that file's original.</li> <li><code>url_sample</code>: the URL of that file's sample.</li> <li><code>url_thumbnail</code>: the URL of that file's thumbnail.</li> <li><code>url_page</code>: the URL of the details page of that file.</li> <li><code>count</code>: counts the current image downloaded during a batch download. Useful to have unique counters per batch.</li> <li><code>num</code>: a counter that goes up for every file with the same name. Useful to prevent overwriting already existing files.</li> <li><code>position</code>: the position of the image in the results list or gallery (starts at 1).</li> <li><code>old_directory</code>: when renaming, store the local path for the current file. (useful to rename images, without changing directory structure).</li> <li><code>old_filename</code>: when renaming, store the local filename for the current file. (useful to move images, but keeping their local names) Beware, this token contains the extension of the file, therefore, should not be used with %ext%.</li> </ul>"},{"location":"docs/filename.html#gallery-tokens","title":"Gallery tokens","text":"<p>Images can access information on the gallery by using the <code>gallery.</code> prefix. Many tokens are present in the gallery object, but the most common are:</p> <ul> <li><code>gallery.id</code>: the ID of the gallery.</li> <li><code>gallery.name</code>: the name/title of the gallery.</li> </ul>"},{"location":"docs/filename.html#special-tokens","title":"Special tokens","text":"<p>Some tokens do not strictly relate to the image itself. Those tokens are:</p> <ul> <li><code>current_date</code>: the current date and time at the moment you're downloading the media.</li> </ul>"},{"location":"docs/filename.html#options","title":"Options","text":""},{"location":"docs/filename.html#introduction_1","title":"Introduction","text":"<p>Most tokens can have options. To add options to a token, just add <code>:</code> after its name, followed by the option name and its value (separated by a <code>=</code>). Multiple options can be set, separating them by <code>,</code>.</p> <p>When the same option is set multiple times, only the latest one is taken into account.</p> <p>The value can be omitted for boolean options. In this case, <code>option_name</code> will be equivalent to <code>option_name=true</code>. Useful to set multiple flags.</p> <p>Example: <code>%token:option1=value1,option2%</code></p> <p>Note</p> <p>Since the comma is used to delimitate options, you need to escape it with <code>^</code> if you want to use it in the value, otherwise it'll be considered as the next option.</p> <p>Example: <code>%tags:separator=^,%</code> will use <code>,</code> as separator.</p>"},{"location":"docs/filename.html#common-options","title":"Common options","text":""},{"location":"docs/filename.html#max-length-int","title":"Max length (int)","text":"<p>If the contents of the token is longer than this value, it will be cut.</p> <p>Example: </p><pre><code>%md5%\n37d49104a49a3c27d3fabfd7e8c24f97\n\n%md5:maxlength=8%\n37d49104\n</code></pre><p></p>"},{"location":"docs/filename.html#unsafe-bool","title":"Unsafe (bool)","text":"<p>Disable removal of unsafe characters. Don't use it in normal filenames, as they won't save on Windows if they contain special characters.</p> <p>Example: </p><pre><code>%copyright%\nfate_stay_night\n\n%copyright:unsafe%\nfate/stay_night\n</code></pre><p></p>"},{"location":"docs/filename.html#underscores-bool","title":"Underscores (bool)","text":"<p>If the \"replace spaces by underscores\" setting is not enabled globally, you can enable it for a given token using this option.</p> <p>Example: </p><pre><code>%copyright%\nfate stay night\n\n%copyright:underscores%\nfate_stay_night\n</code></pre><p></p>"},{"location":"docs/filename.html#spaces-bool","title":"Spaces (bool)","text":"<p>If the \"replace spaces by underscores\" setting is enabled globally, you can disable it for a given token using this option.</p> <p>Example: </p><pre><code>%copyright%\nfate_stay_night\n\n%copyright:spaces%\nfate stay night\n</code></pre><p></p>"},{"location":"docs/filename.html#sql-escape-bool","title":"SQL escape (bool)","text":"<p>Escapes unsafe SQL characters. Useful for SQL commands. Note that it encloses strings in single quotes.</p> <p>Example: </p><pre><code>%all%\nlet's_try \\o/\n\n%all:escape%\n'let''s_try \\\\o/'\n</code></pre><p></p>"},{"location":"docs/filename.html#html-escape-bool","title":"HTML escape (bool)","text":"<p>Escapes unsafe HTML characters.</p> <p>Example: </p><pre><code>%all%\n&gt;_&lt;\n\n%all:htmlescape%\n&amp;gt;_&amp;lt;\n</code></pre><p></p>"},{"location":"docs/filename.html#numbers","title":"Numbers","text":""},{"location":"docs/filename.html#length-int","title":"Length (int)","text":"<p>Length of the left-pad of the number.</p> <p>Example: </p><pre><code>%count%.%ext%\n7.jpg\n\n%count:length=3%.%ext%\n007.jpg\n</code></pre><p></p>"},{"location":"docs/filename.html#precision-float","title":"Precision (float)","text":"<p>Number of digits after the decimal.</p> <p>Example: </p><pre><code>%ratio%.%ext%\n1.333333.jpg\n\n%ratio:precision=1%.%ext%\n1.3.jpg\n</code></pre><p></p>"},{"location":"docs/filename.html#lists","title":"Lists","text":""},{"location":"docs/filename.html#separator-string","title":"Separator (string)","text":"<p>The separator to use in a tag list.</p> <p>Example: </p><pre><code>%character%\ncharacter1 character2\n\n%character:separator=---%\ncharacter1---character2\n</code></pre><p></p>"},{"location":"docs/filename.html#count-boolean","title":"Count (boolean)","text":"<p>If enabled, the token will be replaced by the number of values in the list.</p> <p>Example: </p><pre><code>%character%\ncharacter1 character2\n\n%character:count%\n2\n</code></pre><p></p>"},{"location":"docs/filename.html#sort-boolean","title":"Sort (boolean)","text":"<p>If enabled, the list will be sorted alphabetically.</p> <p>Example: </p><pre><code>%character%\nartist1 tag1 character1 tag2\n\n%character:sort%\nartist1 character1 tag1 tag2\n</code></pre><p></p>"},{"location":"docs/filename.html#case-enum","title":"Case (enum)","text":"<p>Change the casing (capitalization) of words in that list.</p> <p>Possible options:</p> <ul> <li><code>lower</code>: some_tag</li> <li><code>upper_first</code>: Some_tag</li> <li><code>upper</code>: Some_Tag</li> <li><code>caps</code>: SOME_TAG</li> </ul> <p>Example: </p><pre><code>%character%\ntest_tag1 test_tag2\n\n%character:case=upper_first%\nTest_tag1 Test_tag2\n\n%character:case=upper%\nTest_Tag1 Test_Tag2\n</code></pre><p></p>"},{"location":"docs/filename.html#tag-lists","title":"Tag lists","text":""},{"location":"docs/filename.html#include-namespace-boolean","title":"Include namespace (boolean)","text":"<p>If enabled, the namespace of the tags will be included in the result. Better used with the <code>usafe</code> option to keep the <code>:</code>.</p> <p>Example: </p><pre><code>%all%\nartist1 tag1 character1 tag2\n\n%all:includenamespace%\nartist_artist1 general_tag1 character_character1 general_tag2\n\n%all:includenamespace,unsafe%\nartist:artist1 general:tag1 character:character1 general:tag2\n</code></pre><p></p>"},{"location":"docs/filename.html#exclude-namespace-string-list","title":"Exclude namespace (string list)","text":"<p>The list of namespaces you don't want to see when using the \"include namespace\" option.</p> <p>Example: </p><pre><code>%all%\nartist1 tag1 character1 tag2\n\n%all:includenamespace,unsafe%\nartist:artist1 general:tag1 character:character1 general:tag2\n\n%all:includenamespace,excludenamespace=general,unsafe%\nartist:artist1 tag1 character:character1 tag2\n\n%all:includenamespace,excludenamespace=general character,unsafe%\nartist:artist1 tag1 character1 tag2\n</code></pre><p></p>"},{"location":"docs/filename.html#ignore-namespace-string-list","title":"Ignore namespace (string list)","text":"<p>The list of namespaces you don't want to see in the results.</p> <p>Example: </p><pre><code>%all%\nartist1 tag1 character1 tag2\n\n%all:ignorenamespace=character%\nartist1 tag1 tag2\n</code></pre><p></p>"},{"location":"docs/filename.html#dates","title":"Dates","text":""},{"location":"docs/filename.html#format","title":"Format","text":"<p>Beware of not using any character forbidden by your operating system in the format, or images won't save (so you cannot use <code>:</code> on Windows for example).</p> Expression Output d the day as number without a leading zero (1 to 31) dd the day as number with a leading zero (01 to 31) ddd the abbreviated localized day name dddd the long localized day name M the month as number without a leading zero (1-12) MM the month as number with a leading zero (01-12) MMM the abbreviated localized month name MMMM the long localized month name yy the year as two digit number (00-99) yyyy the year as four digit number h the hour without a leading zero (0 to 23 or 1 to 12 if AM/PM display) hh the hour with a leading zero (00 to 23 or 01 to 12 if AM/PM display) m the minute without a leading zero (0 to 59) mm the minute with a leading zero (00 to 59) s the second without a leading zero (0 to 59) ss the second with a leading zero (00 to 59) z the milliseconds without leading zeroes (0 to 999) zzz the milliseconds with leading zeroes (000 to 999) AP use AM/PM display. AP will be replaced by either \"AM\" or \"PM\". ap use am/pm display. ap will be replaced by either \"am\" or \"pm\". <p>All other input characters will be ignored. Any sequence of characters that are enclosed in single quotes will be treated as text and not be used as an expression. Two consecutive single quotes <code>''</code> are replaced by a single quote in the output.</p> <p>Some examples assumed that the date is 21 May 2001 at 14:13:09:</p> Format Result <code>dd.MM.yyyy</code> 21.05.2001 <code>ddd MMMM d yy</code> Tue May 21 01 <code>hh:mm:ss.zzz</code> 14:13:09.042 <code>h:m:s ap</code> 2:13:9 pm <p>Example: </p><pre><code>%date:format=yyyy-MM-dd%\n2001-05-21\n</code></pre><p></p>"},{"location":"docs/filename.html#time-zone","title":"Time zone","text":"<p>You can override the date's timezone using the \"timezone\" option.</p> <p>Allowed values:</p> <ul> <li><code>server</code>: the server's time zone (default)</li> <li><code>local</code>: the current computer's local time zone</li> <li>Any time zone from the IANA database (ex: \"UTC\", \"Europe/Paris\"...)</li> </ul> <p>You can find the list of available time zones on:</p> <ul> <li>Wikipedia</li> <li>The IANA website</li> </ul> <p>Example: </p><pre><code>%date%\n05-18-2021 17.32\n\n%date:timezone=server%\n05-18-2021 17.32\n\n%date:timezone=local%\n05-18-2021 23.32\n\n%date:timezone=UTC%\n05-18-2021 22.32\n\n%date:timezone=Europe/Paris%\n05-18-2021 23.32\n</code></pre><p></p>"},{"location":"docs/filename.html#custom-tokens","title":"Custom tokens","text":"<p>You can also add custom tokens. To do so, go to the options, \"save\" part and \"custom tokens\" subpart. Then just click the button \"Add a new custom token\" and choose a name and tags that will be searched (separate them with spaces). Any tags in this list found in the image will be placed into your token. For example if an image got tags \"a\", \"b\", \"c\", \"d\" and your tags list for token \"test\" is \"a c e\", \"%test%\" will be replaced by \"a c\".</p> <p>Note</p> <p>Custom tokens with an already used name (such as %character%) will be used first.</p>"},{"location":"docs/filename.html#conditionals","title":"Conditionals","text":"<p>You can use conditionals in your filename, using strict inequality signs (<code>&lt;</code> and <code>&gt;</code>).</p> <p>Note</p> <p>There are currently issues with conditionals inside other conditionals, so it is advised to not imbricate conditionals in your filename.</p>"},{"location":"docs/filename.html#simple-conditionals","title":"Simple conditionals","text":""},{"location":"docs/filename.html#token-conditionals","title":"Token conditionals","text":"<p>If any token found in the conditional does not exist or is empty, nothing into it will be displayed.</p> <p>Since an example is worth a thousand words: </p><pre><code>image - &lt;%artist% some text &lt;%nothing% another text&gt; test&gt;&lt;&lt;%character% some text&gt; text %nothing%&gt; %md5%.%ext%\n</code></pre><p></p> <p>Assuming the image contains both an artist and a character, it will return: </p><pre><code>image - %artist% some text  test %md5%.%ext%\n</code></pre><p></p> <p>If the image doesn't have any artist, it will be: </p><pre><code>image -  %md5%.%ext%\n</code></pre><p></p>"},{"location":"docs/filename.html#tag-conditionals","title":"Tag conditionals","text":"<p>You can also test directly the presence of a tag surrounding him with quotes. For example: </p><pre><code>image - &lt;image contains the tag \"solo\"&gt;&lt;\"group\" is one of the image tags&gt; %md5%.%ext%\n</code></pre><p></p> <p>If the image contains the \"solo\" tag, it will return: </p><pre><code>image - image contains the tag solo  %md5%.%ext%\n</code></pre><p></p> <p>If the image contains the \"group\" tag: </p><pre><code>image -  group is one of the image tags %md5%.%ext%\n</code></pre><p></p> <p>If, for some obscure reason, it has both: </p><pre><code>image - image contains the tag solo group is one of the image tags %md5%.%ext%\n</code></pre><p></p> <p>If, it does not have solo or group: </p><pre><code>image -   %md5%.%ext%\n</code></pre><p></p>"},{"location":"docs/filename.html#inverting-conditions","title":"Inverting conditions","text":"<p>You can invert any condition by prefixing it with an exclamation mark <code>!</code> symbol.</p> <p>It works for tokens: </p><pre><code>%md5% -&lt;!%artist% no artist&gt;.%ext%\n</code></pre> As well as tags: <pre><code>&lt;image does not contain the tag !\"tag1\"&gt; %md5%.%ext%\n</code></pre><p></p>"},{"location":"docs/filename.html#if-then-else-conditions","title":"If-then-else conditions","text":"<p>Sometimes, it can be easier to have explicit \"if ... then ... else ...\" conditions.</p> <p>To do so, you should use the <code>&lt;if?then:else&gt;</code> syntax: </p><pre><code>&lt;\"tag\"?yes:no&gt;\n</code></pre> If the tag is present in the image, the condition will be replaced by \"yes\". Otherwise, it will be \"no\".<p></p> <p>If you do not need an \"else\" part, you can omit it and use the simpler <code>&lt;if?then&gt;</code> syntax: </p><pre><code>&lt;\"tag\"?yes&gt;\n</code></pre> If the tag is present in the image, the condition will be replaced by \"yes\". Otherwise, it will simply be skipped.<p></p> <p>The condition part can use either tags or tokens, the same as simple conditionals, combined with <code>&amp;</code> (for \"and\"), <code>|</code> (for \"or\"), and <code>!</code> (for inversion). Complex conditions can also use parentheses (<code>(</code> and <code>)</code>). </p><pre><code>&lt;\"tag\" | !%artist%?tag or no artist:otherwise&gt;\n</code></pre><p></p> <p>You can escape special characters (<code>?</code>, <code>!</code>...) by prefixing them with <code>^</code>. For <code>&lt;</code> and <code>&gt;</code>, you can also double them (<code>&lt;&lt;</code> and <code>&gt;&gt;</code>).</p> <p>Note that while double quotes are optional for tags, it's recommended to use them, especially in complex conditions or for tags containing special characters.</p>"},{"location":"docs/filename.html#javascript","title":"JavaScript","text":"<p>You can also use JavaScript in your filenames. To do so, you can either use the field in the filename window, which you can open by clicking the \"...\" button near the filename field, or by adding \"javascript:\" before your script.</p> <p>For example, if your script is \"md5 + '.' + ext\", your filename will be \"javascript:md5 + '.' + ext\".</p> <p>A more complex one could be: </p><pre><code>javascript:((width&gt;=height)?\"landscape\":\"portrait\")+\"/\"+copyright+\"/\"+md5+\".\"+ext\n</code></pre><p></p> <p>Which would generate files such as:</p> <ul> <li><code>landscape/sword art online/5231166bd271ce0cd0c11d7e3cb342a5.png</code></li> <li><code>portrait/touhou/0498c78f67d5545bea731d4b1051096c.jpg</code></li> <li><code>portrait/touhou/fe2e6eb294f33f455d43b3effcf4ec6c.jpg</code></li> </ul> <p>Note that here, each slash (<code>/</code>) corresponds to a different directory: </p><pre><code>\u251c\u2500\u2500 landscape\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 sword art online\n\u2502\u00a0\u00a0 \u00a0\u00a0  \u00a0\u00a0  \u2514\u2500\u2500 5231166bd271ce0cd0c11d7e3cb342a5.png\n\u2514\u2500\u2500 portrait\n    \u2514\u2500\u2500 touhou\n        \u251c\u2500\u2500 0498c78f67d5545bea731d4b1051096c.jpg\n        \u2514\u2500\u2500 fe2e6eb294f33f455d43b3effcf4ec6c.jpg\n</code></pre><p></p>"},{"location":"docs/filename.html#similar-tags","title":"Similar tags","text":"<p>Sometimes, you have similar tags in your image, which can be problematic for your filename. For example, if you have an image tagged as both \"pokemon\" and \"pokemon_bw\", you might get \"crossover\" when using <code>%copyright%</code>, or \"pokemon pokemon_bw\", which can become annoying for organizing.</p> <p>To fix this, there are a few options.</p>"},{"location":"docs/filename.html#the-use-shortest-if-possible-setting","title":"The \"use shortest if possible\" setting","text":"<p>This setting is specific for copyright tags and can be found in the options window, in the \"Save &gt; Tags &gt; Copyright\" category, as a checkbox at the bottom of the window.</p> <p>This feature takes all tags marked as \"copyright\", and removes all those which are another copyright with a suffix appended. So in our example, \"pokemon pokemon_bw\" would be simplified as \"pokemon\", since \"pokemon_bw\" is \"pokemon\" + \"_bw\".</p>"},{"location":"docs/filename.html#ignored-tags","title":"Ignored tags","text":"<p>You can \"ignore\" tags by right-clicking on them then choosing \"ignore\". This causes the tag to not be treated as having any particular type, and therefore not appear, in our example, in <code>%copyright%</code>. It will however still be in <code>%all%</code>.</p>"},{"location":"docs/metadata.html","title":"Metadata","text":""},{"location":"docs/metadata.html#introduction","title":"Introduction","text":"<p>You might want to store a post's information not in the downloaded file's filename, but instead inside its metadata. This usually allows better searching, and avoid filesystem filename length limits.</p>"},{"location":"docs/metadata.html#windows-property-system","title":"Windows Property System","text":"<p>Only available on Windows due to the nature of those properties.</p> <p>Only available on a few extensions by default (JPG / MP4, not PNG / GIF / WEBM). If you want this to work on every extension, you should use something like FileMeta.</p> <p>Example of commonly used property names (non-exhaustive):</p> <ul> <li>System.Author</li> <li>System.Keywords</li> <li>System.Comment</li> </ul> <p>The full list can be found here: https://docs.microsoft.com/en-us/windows/win32/properties/props</p> <p>Here's a basic example of what is possible to do:</p> <p></p>"},{"location":"docs/metadata.html#exiftool","title":"Exiftool","text":"<p>You first need to download Exiftool and put it in a place where Grabber can find it. Either in your PATH or in the installation folder.</p> <p>Only available on extensions supported by Exiftool. Note that even with this name, Exiftool does not only support EXIF, but also IPTC, XMP, and ICC, as well as some others format-dependent options.</p> <p>Example of commonly used property names (non-exhaustive):</p> <ul> <li>IPTC.Keywords</li> <li>XMP.Creator</li> </ul> <p>The full list can be found here: https://exiftool.org/#supported</p> <p>Note that you don't necessarily need to put the IPTC/XMP prefix, as Exiftool will find it automatically (checking in this order: EXIF, IPTC, XMP).</p> <p>Here's a basic example of what is possible to do:</p> <p></p>"},{"location":"docs/metadata.html#sidecar-files","title":"Sidecar files","text":"<p>The sidecar file settings allows you to control whether Grabber will write to XMP sidecar files or not. There are a few options:</p> <ul> <li>Disabled: will not write any sidecar files</li> <li>On error: will write the sidecar files if the program failed to write to the original file (useful for file formats that do not support metadata)</li> <li>Both sidecar and original: will write to both the original file and the sidecar file</li> <li>Only sidecar: will only write to the sidecar file, without touching the original file</li> </ul> <p>By default, Grabber will use your filename to generate the sidecar file, appending the XMP extension to it. So for example, <code>image.jpg</code> will have a sidecar file called <code>image.jpg.xmp</code>. Some other programs prefer the <code>image.xmp</code> format (without the original extension), so you can check the \"Do not include original extension in sidecar file names\" setting if you prefer that format.</p>"},{"location":"docs/monitors.html","title":"Monitors","text":""},{"location":"docs/monitors.html#introduction","title":"Introduction","text":"<p>When you never want to miss any image for one of your given searches, you might want to consider using a monitor. Monitors run from time to time in the background, and can either automatically download new images, or simply notify you when new images have appeared.</p> <p>It works by checking for new images since the last time the monitor ran. It will not check images before that. Monitors are used for incremental checks, not full checks. If you need to download all images for a given search, you should use a batch download instead. You could then set up a monitor if you want to download images that might be uploaded after your batch download is done running.</p>"},{"location":"docs/monitors.html#adding-a-monitor","title":"Adding a monitor","text":"<p>Just perform the search that you want to monitor, then click the \"Monitor\" button at the bottom of the tab. Note that monitoring big searches might not be very efficient, so it is recommended to monitor more specific searches, like a single artist.</p>"},{"location":"docs/monitors.html#handling-non-tagged-images","title":"Handling non-tagged images","text":"<p>Sometimes, images will be posted on your sources without proper tags or information. For example, some sources us a special <code>tagme</code> tag to indicate that. To avoid this, you can set a delay on a monitor. If you do so, it will ignore the most recent images and only download images that have been uploaded after the delay you've set.</p> <p>So instead of checking images between <code>now</code> and <code>last check</code>, it will check images between <code>now - delay</code> and <code>last check - delay</code>.</p>"},{"location":"docs/portable-version.html","title":"Portable version","text":""},{"location":"docs/portable-version.html#introduction","title":"Introduction","text":"<p>If you want to be able to use the program anywhere without installation, for example on a USB drive, you can make it a portable application.</p>"},{"location":"docs/portable-version.html#how-to","title":"How-to","text":"<p>By default, settings and executable files are located in two different locations. Settings are in: </p><pre><code>C:/Users/%USERNAME%/AppData/Local/Bionus/Grabber\n</code></pre> Or, if you are using an old version of the program: <pre><code>\"C:/Users/%USERNAME%/Grabber\"\n</code></pre> And the executable files are in: <pre><code>\"C:/Program Files/Grabber\"\n</code></pre> To make the application portable, you just have to copy the contents of both of these folders in another directory.<p></p>"},{"location":"docs/search.html","title":"Search","text":""},{"location":"docs/search.html#introduction","title":"Introduction","text":"<p>The main feature of Grabber is to search images, and as such, many things can impact the results you see.</p>"},{"location":"docs/search.html#search-field","title":"Search field","text":"<p>What is written in the main search field will usually be passed as-is to the source, so depending on your source, the search syntax might be different.</p> <p>You should check on the source which syntax they accept, but in most cases, all you have to do is separate each tag with a space.</p>"},{"location":"docs/search.html#post-filter","title":"Post-filter","text":""},{"location":"docs/search.html#introduction_1","title":"Introduction","text":"<p>Sometimes, a source does not allow you to use a given syntax or limits the number of terms you can use.</p> <p>In this case, the best solution is to use a post-filter, which loads the results from the source using your search and then filters them with another search.</p> <p>Warning</p> <p>If your post-filter is too specific, all images might get filtered and Grabber will show zero results!</p>"},{"location":"docs/search.html#syntax","title":"Syntax","text":"<p>Post-filtering uses the most popular search syntax in boorus, which is:</p> <ul> <li>Separate tags by spaces to make an \"AND\" (ex: <code>tag1 tag2</code>)</li> <li>Prefix a tag or a filter by a caret (<code>-</code>) to negate it (ex: <code>-tag</code>)</li> <li><code>field:value</code> to filter by a token (ex: <code>rating:safe</code>), the list of tokens can be found on the Filename page</li> <li><code>field:&gt;value</code> to filter by a token value using a comparison (ex: <code>id:&gt;1000</code>), you can use any of these operators: <code>&gt;</code>, <code>&gt;=</code>, <code>&lt;</code>, <code>&lt;=</code></li> <li><code>field:from..to</code> to filter by a range (ex: <code>date:2019-09-02..2019-09-07</code>)</li> </ul>"},{"location":"docs/search.html#special-grabber-token","title":"Special \"grabber\" token","text":"<p>A special token is generated by Grabber for images to be used by post-filters. It allows to filter on a few special values:</p> <ul> <li><code>grabber:alreadyExists</code> if an image already exists on the disk</li> <li><code>grabber:inMd5List</code> if an image's MD5 is already present in the global MD5 list</li> <li><code>grabber:downloaded</code> if either <code>grabber:alreadyExists</code> or <code>grabber:inMd5List</code> is true</li> <li><code>grabber:favorited</code> if the image's tags contain a favorited tag</li> <li><code>grabber:monitored</code> if the image's tags contain a monitored tag</li> </ul> <p>In addition, two tokens about Grabber version are available:</p> <ul> <li><code>grabber_branch</code>: \"release\" for official releases, or \"nightly\" for the dev version</li> <li><code>grabber_version</code>: the version code (ex: \"1.2.3\") for official releases, or the first 8 characters of the commit hash for the dev version</li> </ul>"},{"location":"docs/search.html#blacklist","title":"Blacklist","text":""},{"location":"docs/search.html#introduction_2","title":"Introduction","text":"<p>You can blacklist some tags or combinations of tags to not see them in the results.</p> <p>It can be edited in the settings in the \"Save &gt; Blacklist\" category, or tags can be added to the blacklist by right-clicking on them and selecting \"Blacklist\".</p> <p>Note:</p> <ul> <li>Blacklist is a post-filter: it is applied after results are returned from the sources.</li> <li>When using the CLI, images that contains blacklisted tags will no be downloaded unless the <code>--blacklist</code> option is used.</li> <li>When using the GUI, images that contain blacklisted tags will not be downloaded unless explicitly selecting them and clicking 'save'.</li> </ul>"},{"location":"docs/search.html#syntax_1","title":"Syntax","text":"<p>Each line of the blacklist corresponds to a combination of tags and uses the same syntax as post-filters.</p>"},{"location":"docs/search.html#example","title":"Example","text":"<p>Given this blacklist: </p><pre><code>tag1\ntag2 tag3\ntag4 rating:safe\n</code></pre><p></p> <p>An image will be considered as \"blacklisted\" if either of those three conditions is met:</p> <ul> <li>The image contains the \"tag1\" tag</li> <li>The image contains both the \"tag2\" and \"tag3\" tags</li> <li>The image contains the \"tag4\" tag and its rating is \"safe\"</li> </ul>"},{"location":"docs/shortcuts.html","title":"Keyboard shortcuts","text":"<p>Note</p> <p>Shortcuts marked with <code>*</code> might change depending on your platform.</p>"},{"location":"docs/shortcuts.html#mnemonics","title":"Mnemonics","text":"<p>Also called \"Access keys\", those are the underlined characters you can find in menu titles or buttons around the user interface. The underlined character correspond to the key to open the menu / click the button when in conjunction with the Alt key.</p> <p>Sometimes, the underline only appears when pressing the Alt key.</p>"},{"location":"docs/shortcuts.html#example","title":"Example","text":"<p>In this example, there are two shortcuts available: * Alt+O to open the sources window * Alt+M to toggle the \"merge results\" feature</p>"},{"location":"docs/shortcuts.html#main-window","title":"Main window","text":"Action Default shortcut Qt Shortcut Quit the application Ctrl+Q<code>*</code> Focus search field Ctrl+L Close tab Ctrl+W<code>*</code> Re-open closed tab Ctrl+Shift+Tab<code>*</code> New tab Ctrl+T<code>*</code> Go to the previous tab Ctrl+PageUp Ctrl+Shift+Tab<code>*</code> Go to the next tab Ctrl+PageDown Ctrl+Tab<code>*</code> Open save directory in file browser Ctrl+O<code>*</code>"},{"location":"docs/shortcuts.html#downloads-tab","title":"Downloads tab","text":"Action Default shortcut Remove selected downloads Delete"},{"location":"docs/shortcuts.html#viewer-window","title":"Viewer window","text":""},{"location":"docs/shortcuts.html#normal-mode","title":"Normal mode","text":"Action Default shortcut Close the window Escape Show previous search result Left arrow Show next search result Right arrow Open media details D Save media as... Ctrl+Shift+S<code>*</code> Save media Ctrl+S<code>*</code> Save media and close window Ctrl+W<code>*</code> Open save path in file browser Ctrl+O Favourite media Ctrl+Alt+S<code>*</code> Favourite media and close window Ctrl+Alt+W<code>*</code> Open favourite path in file browser Ctrl+Alt+O Toggle full-screen mode F11<code>*</code> Toggle slideshow mode Space<code>*</code> Copy the image's raw data to the clipboard Ctrl+C<code>*</code>"},{"location":"docs/shortcuts.html#full-screen-mode","title":"Full-screen mode","text":"Action Default shortcut Leave full-screen mode Escape Leave full-screen mode F11<code>*</code> Show next media Right arrow Show previous media Left arrow Toggle slideshow Space"},{"location":"docs/telemetry.html","title":"Telemetry","text":""},{"location":"docs/telemetry.html#telemetry","title":"Telemetry","text":""},{"location":"docs/telemetry.html#introduction","title":"Introduction","text":"<p>In order to better understand the usage Grabber's users do of the program, there is a very light telemetry integrated.</p> <p>It helps understand which direction to take for the program.</p>"},{"location":"docs/telemetry.html#what-is-sent-and-why","title":"What is sent and why","text":"<p>Note</p> <p>Everything is anonymous, and that what you search/download/etc. is never sent.</p>"},{"location":"docs/telemetry.html#screen-resolution","title":"Screen resolution","text":"<p>To help improve the UI and know how many elements can/should be present on the screen at the same time.</p> <p>For example, if it is clear that most users use the program on a small screen, an effort will have to be made to ensure everything is properly usable on small screens. On the other hand, if there is a lot of 4K users, high-DPI screen support should be improved.</p>"},{"location":"docs/telemetry.html#country-and-language","title":"Country and language","text":"<p>To know which translations to work on, both for the program and the documentation.</p>"},{"location":"docs/telemetry.html#operating-system","title":"Operating system","text":"<p>To know which platforms mainly use the program. Useful to see where to improve releases, testing, and feature support.</p>"},{"location":"docs/telemetry.html#grabbers-version","title":"Grabber's version","text":"<p>To measure penetration, and see how many users \"hold on\" to old versions instead of updating, and to see how many use the nightly version.</p>"},{"location":"docs/telemetry.html#an-event-on-startup","title":"An event on startup","text":"<p>To understand when the program is used, and how many active users there are at a given time.</p> <p>Otherwise, the only way to know the popularity of the program is to count downloads, which has been proven inefficient.</p>"},{"location":"docs/telemetry.html#how-to-disable-telemetry","title":"How to disable telemetry","text":"<p>The sending of anonymous usage data can easily be disabled in the options. Just open them, then in the \"General\" section of the options, uncheck \"Send anonymous usage data\".</p>"},{"location":"docs/website-login.html","title":"Website login","text":""},{"location":"docs/website-login.html#logging-into-a-source","title":"Logging into a source","text":""},{"location":"docs/website-login.html#credentials","title":"Credentials","text":"<p>To log into a source, all you have to do is to open the settings of the source you want to log into and enter your credentials there.</p> <ol> <li>Click the \"Sources\" button at the bottom of any search tab</li> <li>Click the \"Options\" button in front of the website you want to log into</li> <li>Go to the \"Credentials\" tab</li> <li>Enter your username and password (if the site provides an API key, put it in the password field)</li> </ol> <p>For security reasons, some sources require you to hash your password.</p> <ol> <li>If the \"Hash password\" button is present, click it</li> <li>Enter your password in the window that just opened</li> <li>Click \"Ok\"</li> <li>The password field should have been filled with your \"password hash\", which looks something like \"b842ee4b63ff70e4bfb8537593b295a5f95f3710\"</li> </ol> <p>Click \"Confirm\" at the bottom of the site settings window, and you're done! Further requests on that website will use your credentials.</p>"},{"location":"docs/website-login.html#login-methods","title":"Login methods","text":"<p>For some sources, simply adding the credentials is not enough. You may have to go to the \"Login\" tab of the site options and input more settings there. There are two main login methods: \"Through URL\" and \"POST\".</p>"},{"location":"docs/website-login.html#through-url","title":"Through URL","text":"<p>With the \"Through URL\" method, your credentials (often hashed) are passed directly in the URL of the request. This way, for every request sent, the site can check your identity. For this mode, you don't need to fill anything in this tab.</p>"},{"location":"docs/website-login.html#post","title":"POST","text":"<p>With the \"POST\" method, Grabber will first log into the website just like a real user would do: it will fill a form and send the data to the site. It will then check your identity, and on success save a \"session cookie\" that will identify you until you close the program.</p> <p>For this method, more information is required for Grabber to be able to log you in: * The login form's action page (e.g. <code>&lt;form action=\"%value%\"&gt;</code>) * The username field (e.g. <code>&lt;input type=\"text\" name=\"%value%\" /&gt;</code>) * The password field (e.g. <code>&lt;input type=\"password\" name=\"%value%\" /&gt;</code>) * The cookie name, that will be checked to see if the login was successful or not: if the cookie is still empty after the request, Grabber will consider the login as failed</p> <p>Here's an example of an HTML form and its associated settings.</p> <pre><code>&lt;form action='/user_admin/login' method='POST'&gt;\n    &lt;table summary='Login Form' align='center'&gt;\n        &lt;tr&gt;\n            &lt;td width='70'&gt;Name&lt;/td&gt;\n            &lt;td width='70'&gt;&lt;input type='text' name='user'&gt;&lt;/td&gt;&lt;/tr&gt;\n        &lt;tr&gt;\n            &lt;td&gt;Password&lt;/td&gt;\n            &lt;td&gt;&lt;input type='password' name='pass'&gt;&lt;/td&gt;&lt;/tr&gt;\n        &lt;tr&gt;\n            &lt;td colspan='2'&gt;&lt;input type='submit' name='gobu' value='Log In'&gt;&lt;/td&gt;\n        &lt;/tr&gt;\n    &lt;/table&gt;\n&lt;/form&gt;\n</code></pre> <p></p> <p>To know the cookie name, you have to log into the website and check the cookies that were created.</p>"},{"location":"docs/commands/index.html","title":"Commands","text":""},{"location":"docs/commands/index.html#introduction","title":"Introduction","text":"<p>The database commands are executed in this order (for a batch download):</p> <pre><code>before()\nfor each image\n    for each tag\n        tag()\n    image()\nafter()\n</code></pre> <p>Database commands are enabled as soon as you put your database login information in the settings. Note that you have to create the database/tables beforehand.</p>"},{"location":"docs/commands/danbooru.html","title":"Danbooru","text":"<p>Warning</p> <p>Using commands can slow down huge batch downloads (a recent computer may need from 100ms to 1s more per image)</p>"},{"location":"docs/commands/danbooru.html#danbooru","title":"Danbooru","text":""},{"location":"docs/commands/danbooru.html#install","title":"Install","text":"<p>Follow the quickstart in the official README.md documentation from the Danbooru repository. Note that you'll need to have Docker installed.</p> <p>It pretty much only amounts to downloading the <code>docker-compose.yaml</code> file and doing <code>docker-compose up</code>.</p>"},{"location":"docs/commands/danbooru.html#configuration","title":"Configuration","text":"<ul> <li>Create an account on the registration page, you should automatically be an owner</li> <li>Create an API key in \"Account &gt; API key\"</li> </ul>"},{"location":"docs/commands/danbooru.html#grabber","title":"Grabber","text":""},{"location":"docs/commands/danbooru.html#install-nodejs","title":"Install NodeJS","text":"<p>You need Node.js to be installed on your machine to use the upload script used by Grabber. You can download it from their website, or from a package manager here.</p>"},{"location":"docs/commands/danbooru.html#download-the-upload-script","title":"Download the upload script","text":"<p>Download the danbooru.js file into Grabber's installation folder.</p>"},{"location":"docs/commands/danbooru.html#install-nodejs-global-packages","title":"Install NodeJS global packages","text":"<p>This script uses the Node.js axios and form-data packages, so you can install them with: </p><pre><code>npm install -g axios form-data\n</code></pre><p></p> <p>Make sure the <code>NODE_PATH</code> environment variable is properly set to point to your global node_modules folder. On Windows, it's usually: </p><pre><code>C:\\Users\\%USERNAME%\\AppData\\Roaming\\npm\\node_modules\n</code></pre><p></p> <p>But you can check the exact path with: </p><pre><code>npm root -g\n</code></pre><p></p>"},{"location":"docs/commands/danbooru.html#configuration_1","title":"Configuration","text":"<p>Open Grabber, then go to \"Options &gt; Commands\", and set the \"Image\" field to: </p><pre><code>node danbooru.js \"YOUR_USERNAME\" \"YOUR_API_KEY\" \"%all:includenamespace,unsafe,underscores%\" \"%rating%\" \"%source:raw%\" \"%path:nobackslash%\"\n</code></pre><p></p> <p>Make sure to replace <code>YOUR_USERNAME</code> by your Danbooru username, and <code>YOUR_API_KEY</code> by the API key created earlier.</p>"},{"location":"docs/commands/danbooru.html#open-new-images-in-browser","title":"Open new images in browser","text":"<p>If you want to open newly added images in your browser, you need to edit the <code>danbooru.js</code> file, and change <code>OPEN_BROWSER</code> from <code>false</code> to <code>true</code>.</p> <p>You'll also need to install the Node.js open package, that you can install with: </p><pre><code>npm install -g open\n</code></pre><p></p>"},{"location":"docs/commands/gelbooru.html","title":"Gelbooru","text":"<p>Thanks a lot to NobodX for his help with the commands system and Gelbooru.</p>"},{"location":"docs/commands/gelbooru.html#introduction","title":"Introduction","text":"<p>First of all, know that using commands can slow down huge batch downloads (a recent computer may need from 100ms to 1s more per image, which is very consequent).</p> <p>Note</p> <p>In this wiki, I'll consider that you're using Windows. But on Linux &amp; other OSes, it should be pretty much the same (use the cp command instead of copy, LAMP (linux) / MAMP (mac) instead of WAMP, etc.).</p>"},{"location":"docs/commands/gelbooru.html#installing-a-local-web-server","title":"Installing a local web server","text":"<p>First, we're going to install WAMP, which contains everything required to have a local web server.</p> <ol> <li>Download the latest version of WampServer here (2.2e as I am writing this): http://sourceforge.net/projects/wampserver/</li> <li>Install it somewhere that doesn't require admin rights to write into (such as the default location: <code>C:\\wamp</code>)</li> <li>At the end of the installation, the installer may ask for two things.<ol> <li>What your favorite browser is. It doesn't really matter, so you can leave it to the default value which will be Internet Explorer, or change it to another browser (Firefox, Chrome, etc.).</li> <li>It will ask some email settings. Leave the default values, it's not important.</li> </ol> </li> <li>Now that WampServer is installed, you should see a little green W in your system tray, near the clock (you may need to expand the tray to see it).</li> <li>Congratulations! You can visit your local server by going here!</li> </ol>"},{"location":"docs/commands/gelbooru.html#installing-gelbooru","title":"Installing Gelbooru","text":"<ol> <li>Download the latest version of Gelbooru here (0.1.11 as I am writing this): http://gelbooru.com/index.php?page=forum&amp;s=view&amp;id=99</li> <li>Extract it to the www directory in your WampServer installation folder. You can either extract it to a subfolder or not. If you extract it to a subfolder, the site\u2019s url will be http://localhost/subfolder/, and if you don\u2019t it will only be http://localhost/. It\u2019s your choice, but if you don\u2019t create a subfolder, you must remember to remove all the files in your www folder first. For the end of this tutorial, I\u2019ll consider that you are using the subfolder \"gelbooru\".</li> <li>Create a folder named <code>1</code> in the <code>images</code> folder.</li> <li>If you are using linux, give the <code>images</code>, <code>images/1</code> and <code>thumbnails</code> folders writable permissions.</li> <li>Then, go to http://localhost/phpmyadmin/. If you have to log in, use \"root\" as username and \"\" as password (no password).</li> <li>Then, go to the databases tab and create a database named \"gelbooru\" with an <code>utf8_unicode_ci</code> encoding.</li> <li>Once done, Go to the \"SQL\" tab, and put this query in the text area and click \"Go\":    <pre><code>SET GLOBAL log_bin_trust_function_creators = 1;\n</code></pre></li> <li> <p>Then, open the file \"config.php\" with a plain text editor (I don\u2019t recommend using a WYSIWYG editor such as word). You can change \"Localbooru\" to anything: it will be the name of the booru.</p> Replace the line By <code>$mysql_user = \"gelbooru\";</code> <code>$mysql_user = \"root\";</code> <code>$mysql_pass = \"test\";</code> <code>$mysql_pass = \"\";</code> <code>$mysql_db = \"asdf\";</code> <code>$mysql_db = \"gelbooru\";</code> <code>$site_url = \"http://127.0.0.1/branches/0.1.10/0.1.10/\";</code> <code>$site_url = \"http://localhost/gelbooru\";</code> <code>$site_url3 = \"Default Booru\";</code> <code>$site_url2 = $site_url3 = \"Localbooru\";</code> </li> <li> <p>And finally add, just before the \"?&gt;\" at the end of the file:    </p><pre><code>$lowerlimit = 20;\n$no_cache = false;\n$tag_count = 20;\n$new_tag_list = 'iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii';\n$new_user_list = 'iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii';\n$new_cthreshold = 0;\n$new_pthreshold = 0;\n$new_my_tags = '';\nerror_reporting(0);\n</code></pre>    You can of course change these values to whatever you want.<p></p> </li> <li> <p>Go to http://localhost/gelbooru/install/ and register your admin account.</p> </li> <li>If you don\u2019t see any errors the installation went well! As the script suggests, you can now delete the <code>C:\\wamp\\www\\gelbooru\\install</code> folder.</li> <li>Finally, go to phpMyAdmin, click on the \"gelbooru\" database on the left menu, then click on the \"SQL\" tab, and put this query in the text area and click \"Go\":     <pre><code>ALTER TABLE `tag_index` ADD PRIMARY KEY (`tag`)\n</code></pre></li> <li>You can now access your booru by going here: http://localhost/gelbooru/</li> <li>If you still run into errors after adding images, click on the WampServer icon on the system tray, go to \"PHP &gt; PHP settings\" and uncheck \"display errors\".</li> </ol>"},{"location":"docs/commands/gelbooru.html#grabber","title":"Grabber","text":"<p>Launch Grabber, then open the options window and go to the \"Commands\" part. Set it to those values:</p> <ul> <li>Tag: \"\" (nothing)</li> <li>Image: <pre><code>C:\\Windows\\System32\\cmd.exe /C copy \"%path%\" \"C:\\wamp\\www\\gelbooru\\images\\1\\%md5%.%ext%\"\n</code></pre></li> </ul> <p>Note</p> <p>Be careful to put the blank character (ALT+255) between \"cmd.exe\" and \"/C\". Otherwise, the two string were stuck, and the command is not recognized (at least in version 5.4.2 of Grabber).</p> <p>And, in the Database part:</p> <ul> <li>Driver: <code>QMYSQL</code></li> <li>Host: <code>localhost</code></li> <li>User: <code>root</code></li> <li>Password: leave empty</li> <li>Database: <code>gelbooru</code></li> <li>Start: leave empty</li> <li>Image:   <pre><code>INSERT INTO posts(creation_date, hash, image, height, width, ext, rating, tags, directory, active_date) VALUES(NOW(), \"%md5%\", \"%md5%.%ext%\", %height%, %width%, \".%ext%\", \"%rating%\", \" %allo% \", \"1\", \"20110619\");\n</code></pre></li> <li>Tag:   <pre><code>INSERT INTO tag_index(tag, index_count) VALUES(\"%tag%\", 1) ON DUPLICATE KEY UPDATE index_count = index_count+1;\n</code></pre></li> <li>End:   <pre><code>UPDATE post_count SET pcount = (SELECT COUNT(*) FROM posts), last_update = (CURDATE() + 0) WHERE access_key = \"posts\";\n</code></pre></li> </ul> <p>Now, every time you save an image, a copy will be created in your local booru!</p>"},{"location":"docs/commands/gelbooru.html#troobleshooting","title":"Troobleshooting","text":""},{"location":"docs/commands/gelbooru.html#thumbnails","title":"Thumbnails","text":"<p>If you test, you'll see that it doesn't totally work: thumbnails are not generated when doing this. To fix this, just visit http://localhost/gelbooru/thumbs_fix.php. Note that you must be logged in as administrator in Gelbooru to do this.</p>"},{"location":"docs/commands/gelbooru.html#searches-with-short-tags","title":"Searches with short tags","text":"<p>By default, the minimal size for tags is 4. You may want to change this behavior to allow the search of shorter tags (some popular tags, such as \"v\", are only one character long).</p> <p>To do this, open your \"my.ini\" file by clicking on the Wamp icon in the system tray, then \"MySQL &gt; my.ini\".</p> <p>Search for <code>[mysqld]</code> in the file, and just under, add <code>ft_min_word_len=1</code> on a new line (1 is to allow tags which are one characters long, you can set it to whatever you want, by default it is 4). Same thing for <code>[myisamchk]</code>.</p> <p>The end of your file should now look like this (there can be minor differences):</p> <pre><code>[myisamchk]\nft_min_word_len=1\nkey_buffer = 20M\nsort_buffer_size = 20M\nread_buffer = 2M\nwrite_buffer = 2M\n\n[mysqlhotcopy]\ninteractive-timeout\n\n[mysqld]\nft_min_word_len=1\nport=3306\n</code></pre> <p>Then go to phpMyAdmin, in the \"gelbooru\" database, check all the tables and choose \"Repair tables\" in the list.</p>"},{"location":"docs/commands/my-imouto.html","title":"MyImouto","text":""},{"location":"docs/commands/my-imouto.html#introduction","title":"Introduction","text":"<p>First of all, know that using commands can slow down huge batch downloads (a recent computer may need from 100ms to 1s more per image, which is very consequent).</p>"},{"location":"docs/commands/my-imouto.html#install-a-web-server-and-myimouto","title":"Install a web server and MyImouto","text":"<p>Please follow the instructions on MyImouto's wiki to install everything:</p> <p>https://github.com/myimouto/myimouto/wiki/How-to-install</p>"},{"location":"docs/commands/my-imouto.html#install-curl","title":"Install cURL","text":""},{"location":"docs/commands/my-imouto.html#windows","title":"Windows","text":"<p>Download cURL from here (take the 32 or 64 bit version depending on your system). Choose \"Generic\" and \"Any\" for the next options. You'll then get a list of packages, you can take the first. This will make you download a 7z file, that, once extracted, will contain the <code>curl.exe</code> binary in its <code>bin</code> folder. Just copy all the contents of the <code>bin</code> folder into Grabber's installation folder, so that <code>curl.exe</code> and <code>Grabber.exe</code> are in the same place.</p>"},{"location":"docs/commands/my-imouto.html#other-operating-systems","title":"Other operating systems","text":"<p>cURL is very likely already installed on UNIX systems. If it is not, it must be in your package manager with the package name <code>curl</code>.</p>"},{"location":"docs/commands/my-imouto.html#grabber-settings","title":"Grabber settings","text":"<p>Launch Grabber, then open the options window and go to the \"Commands\" part.</p> <p>There, you should empty everything. The only value you need to set is for the \"Image\" field: </p><pre><code>curl -F \"user[name]=YOUR_USERNAME\" -F \"user[password]=YOUR_PASSWORD\" -F \"post[tags]=%all:includenamespace,separator= ,unsafe%\" -F \"post[rating]=%rating%\" -F \"post[file]=@%path:nobackslash%\" http://localhost:3000/post/create\n</code></pre><p></p> <p>Make sure to replace the placeholders by your actual username and password.</p> <p>Now, every time you save an image, a copy will be created in your local booru!</p>"},{"location":"docs/commands/shimmie.html","title":"Shimmie","text":"<p>Warning</p> <p>Using commands can slow down huge batch downloads (a recent computer may need from 100ms to 1s more per image)</p> <p>Thanks a lot to Siegen for his integration of Shimmie and upload script.</p>"},{"location":"docs/commands/shimmie.html#shimmie","title":"Shimmie","text":""},{"location":"docs/commands/shimmie.html#install","title":"Install","text":"<p>Follow the official Docker installation documentation from the Shimmie repository. Note that you'll need to have Docker installed. If you prefer a more on-hands installation without Docker, they also have an on-disk installation documentation you can follow instead.</p>"},{"location":"docs/commands/shimmie.html#configuration","title":"Configuration","text":"<ul> <li>The first time you visit the site, it will ask you for database credentials, you can just switch the \"Type\" to SQLite if you don't know</li> <li>Create an account on the registration page, you should automatically be an administrator</li> <li>Go to the setup page, and edit settings as needed (it's recommended to at least increase the \"Max size per file\" setting to a higher value)</li> </ul>"},{"location":"docs/commands/shimmie.html#grabber","title":"Grabber","text":""},{"location":"docs/commands/shimmie.html#install-php","title":"Install PHP","text":"<p>You need PHP to be installed on your machine to use the upload script used by Grabber. You can find installation instructions on their website.</p> <p>Once installed, make sure that the cURL extension is enabled as the script requires it. It can be done by editing the <code>php.ini</code> file in your PHP installation, replacing <code>;extension=curl</code> by <code>extension=curl</code> (without the leading semicolon). Otherwise, you might encounter this error:</p> <p>Call to undefined function curl_init()</p>"},{"location":"docs/commands/shimmie.html#download-the-upload-script","title":"Download the upload script","text":"<ol> <li>Download the UploadToShimmie.php file somewhere you can edit it.</li> <li>Edit the top part of the file, especially <code>$shimmieUser</code> and <code>$shimmiePassword</code>.</li> <li>Move the file into Grabber's installation folder.</li> </ol>"},{"location":"docs/commands/shimmie.html#configuration_1","title":"Configuration","text":"<p>Open Grabber, then go to \"Options &gt; Commands\", and set the \"Image\" field to: </p><pre><code>php \"UploadToShimmie.php\" -h=\"%md5%\" -f=\"%path%\" -t=\"%all:includenamespace,underscores,unsafe,separator=;%\" -s=\"%website%\" -r=\"%rating%\"\n</code></pre><p></p> <p>Note</p> <p>If you did not install PHP globally, you might need to change <code>php</code> into its exact path, like <code>C:\\tools\\php82\\php.exe</code> (for a Chocolatey install on Windows).</p>"},{"location":"docs/commands/szurubooru.html","title":"Szurubooru","text":"<p>Warning</p> <p>Using commands can slow down huge batch downloads (a recent computer may need from 100ms to 1s more per image)</p>"},{"location":"docs/commands/szurubooru.html#szurubooru","title":"Szurubooru","text":""},{"location":"docs/commands/szurubooru.html#install","title":"Install","text":"<p>Follow the official INSTALL.md documentation from the Szurubooru repository. Note that you'll need to have Docker installed.</p> <p>Don't forget to update the <code>MOUNT_</code> variables in the <code>.env</code> file.</p> <p>If you're having issues setting it up (for example with filesystem permissions), there is a Common errors page in their wiki that might be of help for troubleshooting.</p>"},{"location":"docs/commands/szurubooru.html#configuration","title":"Configuration","text":"<ul> <li>Create an account on the registration page, you should automatically be an administrator</li> <li>Create tag categories in the tag categories page, it is recommended to at least add the \"character\", \"copyright\", \"artist\", and \"meta\" categories, as well as renaming \"default\" to \"general\"</li> <li>Create a token with a very late expiration date in \"Account &gt; Login tokens\"</li> </ul>"},{"location":"docs/commands/szurubooru.html#grabber","title":"Grabber","text":""},{"location":"docs/commands/szurubooru.html#install-nodejs","title":"Install NodeJS","text":"<p>You need Node.js to be installed on your machine to use the upload script used by Grabber. You can download it from their website, or from a package manager here.</p>"},{"location":"docs/commands/szurubooru.html#download-the-upload-script","title":"Download the upload script","text":"<p>Download the szurubooru.js file into Grabber's installation folder.</p> <p>Info</p> <p>If your Szurubooru instance is not on the same machine as Grabber, or simply not accessible at <code>http://localhost:8080/</code>, make sure to update the URL in the script.</p>"},{"location":"docs/commands/szurubooru.html#install-nodejs-global-packages","title":"Install NodeJS global packages","text":"<p>This script uses the Node.js \"axios\" and \"form-data\" plugins, so you can install them with: </p><pre><code>npm install -g axios form-data\n</code></pre><p></p> <p>Make sure the <code>NODE_PATH</code> environment variable is properly set to point to your global node_modules folder. On Windows, it's usually: </p><pre><code>C:\\Users\\%USERNAME%\\AppData\\Roaming\\npm\\node_modules\n</code></pre><p></p> <p>But you can check the exact path with: </p><pre><code>npm root -g\n</code></pre><p></p>"},{"location":"docs/commands/szurubooru.html#configuration_1","title":"Configuration","text":"<p>Open Grabber, then go to \"Options &gt; Commands\", and set the \"Image\" field to: </p><pre><code>node szurubooru.js \"YOUR_USERNAME\" \"YOUR_TOKEN\" \"%all:includenamespace,unsafe,underscores%\" \"%rating%\" \"%source:raw%\" \"%path:nobackslash%\"\n</code></pre><p></p> <p>Make sure to replace <code>YOUR_USERNAME</code> by your Szurubooru username, and <code>YOUR_TOKEN</code> by the token created earlier (in the <code>xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx</code> format or similar).</p> <p>This command will be run every time an image is saved, causing it to also be sent to your Szurubooru instance!</p>"},{"location":"docs/install/android.html","title":"Android","text":""},{"location":"docs/install/android.html#installing-grabber-on-android","title":"Installing Grabber on Android","text":""},{"location":"docs/install/android.html#via-the-apk","title":"Via the APK","text":"<ol> <li>Go to the latest release here</li> <li>Download the <code>.apk</code> file</li> <li>Install it</li> <li>Run the application called <code>Grabber</code></li> </ol>"},{"location":"docs/install/linux.html","title":"Linux","text":""},{"location":"docs/install/linux.html#installing-grabber-on-linux","title":"Installing Grabber on Linux","text":""},{"location":"docs/install/linux.html#via-the-appimage","title":"Via the AppImage","text":"<ol> <li>Go to the latest release here</li> <li>Download the <code>.AppImage</code> file</li> <li>Make it executable using the command:     <pre><code>chmod +x Grabber_*-x86_64.AppImage\n</code></pre></li> <li>Double-click on the AppImage file to start Grabber</li> </ol>"},{"location":"docs/install/linux.html#via-the-pre-built-binary-archive","title":"Via the pre-built binary archive","text":"<ol> <li>Go to the latest release here</li> <li>Download the <code>.tar.gz</code> file</li> <li>Extract it anywhere using the command:     <pre><code>tar -xzf Grabber_*.tar.gz\n</code></pre></li> <li>Launch the <code>Grabber</code> executable to start Grabber</li> </ol> <p>Info</p> <p>Grabber requires the Qt6 libraries to run. If you see a \"error while loading shared libraries\" error, make sure you have the Qt6 packages installed.</p>"},{"location":"docs/install/linux.html#via-flathub","title":"Via Flathub","text":"<ol> <li>Setup Flatpak and Flathub following the instructions here</li> <li>Install Grabber using the command:     <pre><code>flatpak install flathub org.bionus.Grabber\n</code></pre></li> <li>Run it using the command:     <pre><code>flatpak run org.bionus.Grabber\n</code></pre></li> </ol>"},{"location":"docs/install/linux.html#via-the-aur-arch-linux","title":"Via the AUR (Arch Linux)","text":"<p>Grabber has packages on the AUR for Arch Linux:</p> <ul> <li>imgbrd-grabber-bin which pulls the latest <code>tar.gz</code> release.</li> <li>imgbrd-grabber-appimage which pulls the latest <code>appimage</code> release.</li> <li>imgbrd-grabber which builds the package from source.</li> </ul> <p>You can install Grabber by running this command, substituting the package you want to install: </p><pre><code>paru -Sy imgbrd-grabber-bin\n</code></pre><p></p>"},{"location":"docs/install/macos.html","title":"MacOS","text":""},{"location":"docs/install/macos.html#installing-grabber-on-macos","title":"Installing Grabber on MacOS","text":""},{"location":"docs/install/macos.html#via-homebrew","title":"Via Homebrew","text":"<ol> <li>Install Homebrew</li> <li>Add the Grabber tap using the command:     <pre><code>brew tap Bionus/imgbrd-grabber\n</code></pre></li> <li>Install the Grabber cask using the command:     <pre><code>brew install imgbrd-grabber\n</code></pre></li> </ol>"},{"location":"docs/install/macos.html#via-the-dmg","title":"Via the DMG","text":"<ol> <li>Go to the latest release here</li> <li>Download the <code>.dmg</code> file</li> <li>Open the <code>.dmg</code> file</li> <li>Drag and drop the <code>Grabber.app</code> file to your <code>Applications</code> directory</li> <li>Eject and remove the <code>.dmg</code> file</li> <li>Launch Grabber via Launchpad</li> </ol> <p>Warning</p> <p>Grabber is not a verified Apple application, so you might get a \"the developer cannot be verified\" error. In that case, you should open Finder, go to your <code>Applications</code> directory, then right click <code>Grabber.app</code> then choose \"Open\". Then, you'll be able to choose \"Open\" to start Grabber anyway. You only need to do this once. More information here.</p>"},{"location":"docs/install/windows.html","title":"Windows","text":""},{"location":"docs/install/windows.html#installing-grabber-on-windows","title":"Installing Grabber on Windows","text":""},{"location":"docs/install/windows.html#via-the-installer","title":"Via the installer","text":"<ol> <li>Go to the latest release here</li> <li>Download the <code>.exe</code> file corresponding to your CPU architecture,<code>x64</code> for 64-bit, <code>x86</code> for 32-bit (if you're not sure, you likely have a 64-bit CPU)</li> <li>Launch the installer and follow the steps</li> <li>If you haven't left the \"start Grabber\" checked at the end of the installation, go to the installation folder then launch <code>Grabber.exe</code> (or use the shortcut created on the desktop during the installation).</li> </ol> <p>Info</p> <p>By default, the program will be installed to <code>C:/Program Files/Grabber</code> and your settings will be stored in <code>%LocalAppData%/Bionus/Grabber</code></p>"},{"location":"docs/install/windows.html#via-the-portable-version","title":"Via the portable version","text":"<ol> <li>Go to the latest release here</li> <li>Download the <code>.zip</code> file corresponding to your CPU architecture,<code>x64</code> for 64-bit, <code>x86</code> for 32-bit (if you're not sure, you likely have a 64-bit CPU)</li> <li>Extract the archive anywhere on your computer</li> <li>Launch <code>Grabber.exe</code></li> </ol>"},{"location":"docs/plugins/theme.html","title":"Themes","text":""},{"location":"docs/plugins/theme.html#themes","title":"Themes","text":"<p>You can add Qt themes to Grabber, using CSS to customize all parts of the UI.</p> <p>To add a new theme to Grabber, just create a folder in the <code>themes</code> directory (located in your configuration directory) with the name of your theme. Then create a <code>style.css</code> file inside that new folder. You just have to write your CSS into that file!</p> <p>The documentation for Qt's stylesheet can be found here: https://doc.qt.io/qt-5/stylesheet-reference.html</p> <p>If you made a nice theme that you feel could be added to the default Grabber installation, feel free to propose it to the team by making a pull request!</p>"},{"location":"docs/plugins/translation.html","title":"Translations","text":""},{"location":"docs/plugins/translation.html#introduction","title":"Introduction","text":"<p>If your language is not available for the program, or not up-to-date, you can add or edit it pretty easily. The goal of this page is to tell you how to do this.</p> <p>Warning</p> <p>Please only send translations for official use if you're native or bilingual in that language</p>"},{"location":"docs/plugins/translation.html#using-crowdin","title":"Using Crowdin","text":"<p>Crowdin is the preferred way to translate Grabber, as well as the easiest and most convenient.</p>"},{"location":"docs/plugins/translation.html#register-as-a-translator","title":"Register as a translator","text":"<ol> <li>Go to Crowdin.</li> <li>Login, either by creating a new account or using one of your existing accounts (for example a GitHub account).</li> <li>Click the language you'd like to translate.</li> <li>Click the \"Join\" button (note that you won't see the \"Join\" button if you're not logged in).</li> <li>You'll be asked for a short introduction about why you can and want to translate Grabber. Don't forget to tell me which languages you want to translate, so that you can be given the proper access.</li> </ol> <p>Once done, your application will be reviewed as soon as possible, and if approved you'll be able to access to the language's translation interface.</p>"},{"location":"docs/plugins/translation.html#translating","title":"Translating","text":"<ol> <li>Go to Crowdin.</li> <li>Click the language you'd like to translate.</li> <li>Click the \"Translate all\" button.</li> <li>Fill-up the \"Enter translation here\" part, then mark item as done (by clicking \"Save\", or <code>Ctrl + Return</code>).</li> </ol> <p>You can find more information about translating with Crowdin in the official getting started and online editor documentation pages.</p>"},{"location":"docs/plugins/translation.html#using-an-offline-editor","title":"Using an offline editor","text":""},{"location":"docs/plugins/translation.html#download-qt-linguist-and-lrelease","title":"Download Qt Linguist and lrelease","text":"<p>The software used to write translations for Grabber is Qt Linguist. You can also use any other software that support Qt's <code>.ts</code> files, such as POEdit.</p> <p>Qt Linguist and <code>lrelease</code> are included in Grabber's translation tools. Just download them and unzip them somewhere.</p> <p>Note that even if you don't use Qt Linguist, you'll need <code>lrelease</code> in order to build your translations into a file usable by Grabber.</p>"},{"location":"docs/plugins/translation.html#how-to-create-a-new-translation-file","title":"How to create a new translation file","text":"<ol> <li>Download \"YourLanguage.ts\" from GitHub here. The translation file for the Crash Reporter can be found here.</li> <li>Rename it by the name of your language in English, for example \"German\" (so the file will be called \"German.ts\").</li> <li>Launch Qt Linguist.</li> <li>Open (\"File &gt; Open...\" or <code>Ctrl + O</code>) your translation file.</li> <li>A new window will pop up: for the source language's language, set English, and for the country USA (you can also leave the default value). For the target language and country, just put here your language and country (in the previous example, German from Germany).</li> </ol>"},{"location":"docs/plugins/translation.html#editing-an-existing-translation","title":"Editing an existing translation","text":"<ol> <li>Launch Qt Linguist.</li> <li>Open (\"File &gt; Open...\" or <code>Ctrl + O</code>) the language file you want to update.</li> </ol>"},{"location":"docs/plugins/translation.html#translating_1","title":"Translating","text":"<p>Note</p> <p>If you understand another language (such as French) as well or better than English, you can also open it: it will then show both French and English versions when asking you for a translation.</p> <p>Now that you're ready, all that's left is to actually get translating!</p> <ol> <li>There is a part in the window with five fields: \"Source text\", \"'Your language' translation\" and \"'Your language' translator comments\".</li> <li>Fill-up the \"'Your language' translation\" part, then mark item as done (\"Translation &gt; Done and Next\", the green tick button, or <code>Ctrl + Return</code>).</li> <li>Once all the translations have been marked as done, save and quit.</li> <li>Drag and drop your translation file on \"lrelease.exe\".</li> <li>Another file will be created : \"'Your language'.qm\". Move it to the \"languages\" directory in the Grabber's installation folder (by default \"%ProgramFiles(x86)%/Grabber\").</li> <li>You can now choose your language in the options! Note that it may need a restart for all texts to be properly translated.</li> </ol> <p>You can find more information about translating with Qt Linguist in the official Qt documentation.</p>"},{"location":"docs/plugins/translation.html#sending-the-result","title":"Sending the result","text":"<p>Once finished, you can either send me a mail with your translation file (the <code>.ts</code> one) at bio.nus@hotmail.fr, so I will add your translation to the officially supported languages!</p> <p>You can also open a new issue and upload the translation file in it. I will then close the issue once your language is included in the program.</p> <p>Another option is to send a pull request on the project, if you know how to do so. I will then review and merge it.</p>"},{"location":"docs/sites/index.html","title":"Sites","text":""},{"location":"docs/sites/index.html#based-on-an-existing-source-type","title":"Based on an existing source type","text":"<p>If the site you're trying to add uses the same source type (e.g. Gelbooru 0.1) as already-supported sites, you're in luck as it should be easy to add it to Grabber.</p> <ol> <li>Start the program.</li> <li>Click on the \"Sources\" button at the bottom of a search tab</li> <li>Click on the \"Add\" button at the bottom of the window that just popped up</li> <li>Fill the Url field, and leave the \"Guess\" checkbox checked</li> <li>If the program fails to guess the source type, uncheck \"Guess\", and choose a source type manually in the list</li> </ol>"},{"location":"docs/sites/index.html#create-a-new-source-type","title":"Create a new source type","text":"<p>If none of the available sources types match the website you want to add, you'll have to create one yourself.</p> <p>You can see this documentation for more info.</p>"},{"location":"docs/sites/javascript-helper.html","title":"JavaScript helper","text":""},{"location":"docs/sites/javascript-helper.html#introduction","title":"Introduction","text":"<p>In a JavaScript model file, you have access to a global <code>Grabber</code> helper object, which contains a handful of functions useful in models.</p> <p>Some of them are simply JavaScript functions, and others are bindings to C++ code, when the JavaScript API is not sufficient, or when Qt can do the job easily.</p>"},{"location":"docs/sites/javascript-helper.html#c","title":"C++","text":""},{"location":"docs/sites/javascript-helper.html#regexmatches","title":"regexMatches","text":"<p>Parameters:</p> <ul> <li>regex (string)</li> <li>str (string)</li> </ul> <p>Returns: object[]</p>"},{"location":"docs/sites/javascript-helper.html#description","title":"Description","text":"<p>Global match a PCRE regex in a string.</p>"},{"location":"docs/sites/javascript-helper.html#example","title":"Example","text":"<pre><code>\\d+ (\\d+) (?&lt;third&gt;\\d+)\n</code></pre> <pre><code>\"01 23 45 67 89 01 23 45 67 89\"\n</code></pre> <pre><code>[\n    {\n        \"0\": \"01 23 45\",\n        \"1\": \"23\",\n        \"2\": \"45\",\n        \"third\": \"45\"\n    },\n    {\n        \"0\": \"67 89 01\",\n        \"1\": \"89\",\n        \"2\": \"01\",\n        \"third\": \"01\"\n    },\n    {\n        \"0\": \"23 45 67\",\n        \"1\": \"45\",\n        \"2\": \"67\",\n        \"third\": \"67\"\n    }\n]\n</code></pre>"},{"location":"docs/sites/javascript-helper.html#parsexml","title":"parseXML","text":"<p>Parameters:</p> <ul> <li>str (string)</li> </ul> <p>Returns: object</p>"},{"location":"docs/sites/javascript-helper.html#description_1","title":"Description","text":"<p>Parses the string passed and return the parsed XML tree.</p>"},{"location":"docs/sites/javascript-helper.html#example_1","title":"Example","text":"<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;posts type=\"array\"&gt;\n    &lt;post&gt;\n        &lt;id&gt;123&lt;/id&gt;\n        &lt;name&gt;toto&lt;/name&gt;\n    &lt;/post&gt;\n    &lt;post&gt;\n        &lt;id attr=\"456\"&gt;789&lt;/id&gt;\n        &lt;name&gt;test&lt;/name&gt;\n    &lt;/post&gt;\n&lt;/posts&gt;\n</code></pre> <pre><code>{\n    \"posts\": {\n        \"@attributes\": {\n            \"type\": \"array\"\n        },\n        \"post\": [\n            {\n                \"id\": {\n                    \"#text\": \"123\"\n                },\n                \"name\": {\n                    \"#text\": \"toto\"\n                }\n            },\n            {\n                \"id\": {\n                    \"@attributes\": {\n                        \"attr\": \"456\"\n                    },\n                    \"#text\": \"789\"\n                },\n                \"name\": {\n                    \"#text\": \"test\"\n                }\n            }\n        ]\n    }\n}\n</code></pre>"},{"location":"docs/sites/javascript-helper.html#parsehtml","title":"parseHTML","text":"<p>Parameters:</p> <ul> <li>html (string)</li> <li>fragment (bool) = false</li> </ul> <p>Returns: object (JavascriptHtmlDocument)</p>"},{"location":"docs/sites/javascript-helper.html#description_2","title":"Description","text":"<p>Parses the string passed and return a parsed HTML node object.</p> <p>Set <code>fragment</code> to true if the HTML to parse is not a whole HTML document but only a part of it.</p>"},{"location":"docs/sites/javascript-helper.html#example_2","title":"Example","text":"<pre><code>const parsed = Grabber.parseHTML(src);\nconst images = parsed.find(\"#images-list img\");\nconst inner = images.map((img) =&gt; img.innerHTML());\n</code></pre>"},{"location":"docs/sites/javascript-helper.html#javascripthtmldocumentfind","title":"JavascriptHtmlDocument::find","text":"<p>Parameters:</p> <ul> <li>css (string)</li> </ul> <p>Returns: object[] (JavascriptHtmlDocument[])</p>"},{"location":"docs/sites/javascript-helper.html#description_3","title":"Description","text":"<p>Returns a list of nodes matching the passed CSS selectors.</p>"},{"location":"docs/sites/javascript-helper.html#javascripthtmldocumenttag","title":"JavascriptHtmlDocument::tag","text":"<p>Returns: string</p>"},{"location":"docs/sites/javascript-helper.html#description_4","title":"Description","text":"<p>Returns the tag name of the node.</p>"},{"location":"docs/sites/javascript-helper.html#javascripthtmldocumentouterhtml","title":"JavascriptHtmlDocument::outerHTML","text":"<p>Returns: string</p>"},{"location":"docs/sites/javascript-helper.html#description_5","title":"Description","text":"<p>Returns the serialized HTML of the element and its descendants.</p>"},{"location":"docs/sites/javascript-helper.html#javascripthtmldocumentinnerhtml","title":"JavascriptHtmlDocument::innerHTML","text":"<p>Returns: string</p>"},{"location":"docs/sites/javascript-helper.html#description_6","title":"Description","text":"<p>Returns the serialized HTML of the element's descendants.</p>"},{"location":"docs/sites/javascript-helper.html#javascripthtmldocumentinnertext","title":"JavascriptHtmlDocument::innerText","text":"<p>Returns: string</p>"},{"location":"docs/sites/javascript-helper.html#description_7","title":"Description","text":"<p>Returns the rendered text content of an element.</p>"},{"location":"docs/sites/javascript-helper.html#javascripthtmldocumentpath","title":"JavascriptHtmlDocument::path","text":"<p>Returns: string[]</p>"},{"location":"docs/sites/javascript-helper.html#description_8","title":"Description","text":"<p>Returns the list of the tags of the parent nodes.</p>"},{"location":"docs/sites/javascript-helper.html#javascripthtmldocumentpathids","title":"JavascriptHtmlDocument::pathIds","text":"<p>Returns: string[]</p>"},{"location":"docs/sites/javascript-helper.html#description_9","title":"Description","text":"<p>Returns the list of the IDs of the parent nodes.</p>"},{"location":"docs/sites/source-example.html","title":"Source example","text":""},{"location":"docs/sites/source-example.html#introduction","title":"Introduction","text":"<p>The goal of this page is to provide a step-by-step example on how to create a new source, in this case Danbooru.</p> <p>Warning</p> <p>It is strongly recommended to have read the Source docs first and to have types.d.ts open.</p>"},{"location":"docs/sites/source-example.html#typescript-development-environment","title":"TypeScript development environment","text":"<p>All sources in Grabber are coded in TypeScript. So before going further, it is recommended to set it up first. For that, you'll first need to install Node.js.</p> <p>Then, download Grabber source code somewhere, either via git or via GitHub \"download code as ZIP\" feature.</p> <p>Once done, run <code>npm install</code> in the \"src/sites/\" directory to install the dependencies. Then, you can build all sources with <code>npm run build</code>. You can also run the linter to check for invalid coding style issues with <code>npm run check</code>.</p> <p>Note</p> <p>VS Code is the recommended light IDE for editing sources, but any other can do the trick.</p>"},{"location":"docs/sites/source-example.html#structure","title":"Structure","text":"<p>First, let's create a new directory in <code>C:\\Users\\%USERNAME%\\AppData\\Local\\Bionus\\Grabber\\sites</code>, named \"Danbooru\".</p> <p>In there, let's create a <code>sites.txt</code> file, containing a single line, \"danbooru.donmai.us\".</p> <p>In addition, we download Danbooru's favicon. Most of the time, it can be found in \"/favicon.ico\" on the server. In other cases, you can find out the correct link by looking for \"shortcut icon\" in any page's source code.</p> <p>This favicon being a .ico file, we need to convert it to PNG. If you have an image editor that can do that, go ahead. Otherwise, there's lots of tools online providing this service, that can be found by searching \"ico to png online\" on a search engine. Rename the final file to \"icon.png\" and you're done.</p> <p>Then, the last step is to create a \"model.ts\" file that will hold our source code. You can leave it empty for now. Running <code>npm run build</code> should generate a corresponding \"model.js\" file. Open the TS file in an editor, and let's start the actual coding.</p>"},{"location":"docs/sites/source-example.html#basics","title":"Basics","text":"<p>First, we create a basic source, with a name and no API for now.</p> <pre><code>export const source: ISource = {\n    name: \"Danbooru\",\n    apis: {},\n};\n</code></pre> <p>By checking in types.d.ts, we see that the <code>ISource</code> type actually has a lot more fields. We ignore them for now as they're optional. We'll go back to them later on.</p>"},{"location":"docs/sites/source-example.html#api","title":"API","text":"<p>A source must have at least one API. For Danbooru, the most straightforward API is the JSON API, accessible by simply adding \".json\" to most endpoints (for example, \"/posts.json\" instead of \"/posts\", or \"/tags.json\" instead of \"/tags\").</p> <p>We can introduce it as a separate variable: </p><pre><code>const api: IApi = {\n    name: \"JSON\",\n    auth: [],\n\n    search: {\n        url() {},\n        parse() {},\n    },\n}\n\nexport const source: ISource = {\n    name: \"Danbooru\",\n    apis: {\n        json: api,\n    },\n};\n</code></pre><p></p> <p>Or directly put it inside the source object: </p><pre><code>export const source: ISource = {\n    name: \"Danbooru\",\n    apis: {\n        json: {\n            name: \"JSON\",\n            auth: [],\n\n            search: {\n                url() {},\n                parse() {},\n            },\n        },\n    },\n};\n</code></pre><p></p> <p>We can see a few things here:</p> <ul> <li>The <code>name</code> field is quite obvious, we just use \"JSON\" because that's the format used by this API</li> <li>The <code>auth</code> field is left as an empty array, because even anonymous users can use this API, no authentication is required</li> <li>The <code>search</code> object contains two functions, <code>url()</code> and <code>parse()</code> that we will now discuss in more detail</li> </ul>"},{"location":"docs/sites/source-example.html#search-url-function","title":"Search \"url\" function","text":"<p>This function returns the URL that lists the image on that API. As we saw at the beginning, that would be \"/posts.json\" for Danbooru.</p> <p>The types.d.ts file also explains which parameters are passed to this function. In our case, we only need the <code>query</code> parameter. Each of its member is described more in depth in the <code>types.d.ts</code> file, but what's of interest are those two: </p><pre><code>/**\n * What the user entered in the search field, as-is.\n */\nsearch: string;\n\n/**\n * The page number of this query.\n */\npage: number;\n</code></pre><p></p> <p>Let's use those two members to generate a proper URL: </p><pre><code>url(query: ISearchQuery): string {\n    return \"/posts.json?page=\" + query.page + \"&amp;tags=\" + encodeURIComponent(query.search);\n}\n</code></pre><p></p> <p>Note that we use <code>encodeURIComponent</code> for the free input part, as we don't know if the user will enter some special characters that could break the search, such as \"&amp;\" or \"=\".</p>"},{"location":"docs/sites/source-example.html#search-parse-function","title":"Search \"parse\" function","text":"<p>With the URL generated above, Grabber will make an HTTP call. Then, it will pass the output of this call to the \"parse\" function, whose job is to turn this raw output into a list of images.</p> <p>In our case, the raw output is made of JSON. JavaScript (and by extension TypeScript) provides a convenient way to parse JSON, namely JSON.parse().</p> <p>Let's use this information to do some basic parsing and map it to the correct image format, defined in types.d.ts as the <code>IImage</code> type: </p><pre><code>parse(src: string): IParsedSearch {\n    const parsed = JSON.parse(src);\n\n    const images = parsed.map((raw: any): IImage =&gt; ({\n        file_url: raw.file_url,\n        preview_file_url: raw.preview_url,\n    }))\n\n    return { images };\n}\n</code></pre><p></p> <p>And here you have a basic parsing method! However, we might want to return more than just the thumbnail and file URLs. Let's add a few more fields, taking inspiration from both the JSON output and the <code>IImage</code> type: </p><pre><code>parse(src: string): IParsedSearch {\n    const parsed = JSON.parse(src);\n\n    const images = parsed.map((raw: any): IImage =&gt; {\n        return {\n            file_url: raw.file_url,\n            preview_file_url: raw.preview_url,\n            id: raw.id,\n            md5: raw.md5,\n            rating: raw.rating,\n            tags: raw.tag_string,\n            author: raw.uploader_name,\n            score: raw.score,\n        };\n    })\n\n    return { images };\n}\n</code></pre><p></p> <p>Of course, there's still more fields we could add, but let's stop here for the scope of this example.</p>"},{"location":"docs/sites/source-example.html#authentication","title":"Authentication","text":"<p>While this particular API does not require authentication, it's pretty common for sources to require being authenticated before being able to access their API. In Danbooru's case, it's also useful to provide authentication because it allows premium users to use their premium features within Grabber (for example to search more than 2 tags at a time).</p> <p>So how do we do that? First, we have to determine which kind of authentication is required. Usually, for a proper API, the user would need to provide its API key somehow in the request. Or for an HTML-based \"API\", that would be a more classic login form somewhere.</p> <p>Grabber supports many types of login, such as OAuth, POST, HTTP Basic, in-url, etc. The exhaustive list can be found in the <code>IAuth</code> type.</p> <p>For this example, there's two ways to authenticate requests to Danbooru. The first is pretty obvious and is the login form. The second can be found in their documentation, in the \"Authentication\" part. It says that we can use either HTTP Basic authentication using an API key, or just pass it in the URL.</p>"},{"location":"docs/sites/source-example.html#login-form","title":"Login form","text":""},{"location":"docs/sites/source-example.html#basics_1","title":"Basics","text":"<p>The \"login form\" authentication type is described in the <code>IHttpAuth</code> login type, let's start by writing a basic version:</p> <pre><code>const auth: IAuth = {\n    type: \"post\",\n    url: \"/session\",\n    fields: [],\n    check: null,\n};\n</code></pre> <p>How do we get those values? Simply go to the login page and inspect the main <code>&lt;form&gt;</code> element there. The \"method\" attribute corresponds to the <code>type</code> you want to use (GET or POST, by default and most usually POST), and the \"action\" attribute corresponds to the <code>url</code>.</p> <p>Here's the HTML of the <code>&lt;form&gt;</code> field for reference: </p><pre><code>&lt;form\n    novalidate=\"novalidate\"\n    class=\"simple_form session\"\n    action=\"/session\"\n    accept-charset=\"UTF-8\"\n    method=\"post\"\n&gt;\n</code></pre><p></p> <p>Now you'll notice we're still missing the <code>fields</code> and <code>check</code> members.</p>"},{"location":"docs/sites/source-example.html#auth-fields","title":"Auth fields","text":"<p>The fields correspond to the different inputs on the login page. In most cases, that would be a username and password. Sometimes, there's also a few hidden fields on the page (<code>&lt;input type=\"hidden\"&gt;</code>) so be careful with those as well. Those fields are built using the <code>IAuthField</code> type.</p> <p>In this example, there's two inputs on the page: username and password, which gives us those two fields:</p> <pre><code>[\n    {\n        id: \"pseudo\",\n        key: \"name\",\n    },\n    {\n        id: \"password\",\n        key: \"password\",\n        type: \"password\",\n    },\n]\n</code></pre> <ul> <li><code>id</code> corresponds to a certain mapping in Grabber. For usernames, you need to use \"pseudo\". For passwords, it's the straightforward \"password\"</li> <li><code>key</code> corresponds to the \"name\" property of the <code>&lt;input&gt;</code> field, i.e. the name of the data as sent by the form</li> <li><code>type</code> is optional, and allows to customize the type of input on Grabber's side. \"password\" for example will hide the user input</li> </ul> <p>Here's the HTML of those two fields for reference (the most important being the <code>&lt;input /&gt;</code> fields): </p><pre><code>&lt;div class=\"input string required session_name\"&gt;\n    &lt;label class=\"string required\" for=\"session_name\"&gt;&lt;abbr title=\"required\"&gt;*&lt;/abbr&gt; Name&lt;/label&gt;\n    &lt;input class=\"string required\" type=\"text\" name=\"session[name]\" id=\"session_name\" /&gt;\n&lt;/div&gt;\n&lt;div class=\"input password required session_password field_with_hint\"&gt;\n    &lt;label class=\"password required\" for=\"session_password\"&gt;&lt;abbr title=\"required\"&gt;*&lt;/abbr&gt; Password&lt;/label&gt;\n    &lt;input autocomplete=\"password\" class=\"password required\" type=\"password\" name=\"session[password]\" id=\"session_password\" /&gt;\n    &lt;span class=\"hint\"&gt;&lt;a href=\"/password_reset\"&gt;Forgot password?&lt;/a&gt;&lt;/span&gt;\n&lt;/div&gt;\n</code></pre><p></p>"},{"location":"docs/sites/source-example.html#auth-check","title":"Auth check","text":"<p>Once the HTTP call is done, it can be very useful to check whether the login was successful or not. To do so, there's multiple ways to check, described in the <code>IAuthCheck</code> type.</p> <p>For our example, we can use the simplest one, \"cookie\". Indeed, when logged in, many websites will generate what is called a user session, whose ID will be stored in a cookie. That means that anonymous users don't have said cookie, but logged-in users have it. As such, if we check that this cookie exists, we can know whether the login was successful or not.</p> <p>We can also check other various cookies, such as a \"remember me\" cookie or similar. All cookies can be checked using the browser's \"Storage\" devtool, so it's quite easy to see which ones are specific to a logged-in user or not.</p> <p>Doing this kind of check is quite simple, for example for the cookie \"password_hash\" on Danbooru:</p> <pre><code>{\n    type: \"cookie\",\n    key: \"password_hash\",\n}\n</code></pre>"},{"location":"docs/sites/source-example.html#final-result","title":"Final result","text":"<p>So here's how our login form auth looks like, now that it's complete (ignored the <code>api</code> part for clarity):</p> <pre><code>const auth: IAuth = {\n    type: \"post\",\n    url: \"/session\",\n    fields: [\n        {\n            id: \"pseudo\",\n            key: \"name\",\n        },\n        {\n            id: \"password\",\n            key: \"password\",\n            type: \"password\",\n        },\n    ],\n    check: {\n        type: \"cookie\",\n        key: \"password_hash\",\n    },\n};\n\nexport const source: ISource = {\n    name: \"Danbooru\",\n    auths: {\n        session: auth,\n    },\n};\n</code></pre>"},{"location":"docs/sites/source-example.html#going-further","title":"Going further","text":"<p>Now the source is properly working, but there's a few additional things that are possible to do in Grabber but not supported. Let's go over them one by one to get a fully detailed source.</p>"},{"location":"docs/sites/source-example.html#tag-format","title":"Tag format","text":"<p>This describes how the tags are formatted on the source, described by the <code>ITagFormat</code> type. For Danbooru, tags look like \"some_tag\". It's fully lowercase, with an underscore between individual tags.</p> <p>As such, the tag format is quite straightforward: </p><pre><code>export const source: ISource = {\n    // ...\n    tagFormat: {\n        case: \"lower\",\n        wordSeparator: \"_\",\n    },\n    // ...\n};\n</code></pre><p></p>"},{"location":"docs/sites/source-example.html#search-format","title":"Search format","text":"<p>This describes how the searches are built on the source, described by the <code>SearchFormat</code> type. For Danbooru, basic searches look quite simple: just separate tags by spaces.</p> <p>But there's actually a lesser known feature to do \"OR\" operations, using tilde. \"~tag1 ~tag2\" will return all images having either tag1 OR tag2.</p> <p>Both the \"or\" and \"and\" members of a search format can either be a simple separator string, or a separator plus a prefix. There also is a <code>parenthesis</code> member to say whether parenthesis are supported on this source. Finally, there is a <code>precedence</code> member that says which search operator (\"or\" or \"and\") have priority over the other. Here, it can be determined by searching \"tag1 ~tag2 ~tag3\". If it returns results looking like \"tag1 (~tag2 ~tag3)\" that means the \"or\" operator has precedence. If it's \"(tag1 ~tag2) ~tag3\", then it's the \"and\" operator.</p> <p>In this case, it gives this result:</p> <pre><code>export const source: ISource = {\n    // ...\n    searchFormat: {\n        and: \" \",\n        or: {\n            separator: \" \",\n            prefix: \"~\",\n        },\n        parenthesis: false,\n        precedence: \"or\",\n    },\n    // ...\n};\n</code></pre>"},{"location":"docs/sites/source-registry.html","title":"Source registries","text":""},{"location":"docs/sites/source-registry.html#introduction","title":"Introduction","text":"<p>Source registries are JSON files pointing to source files. They are used to add sources easily to Grabber.</p> <p>They can be hosted anywhere and can point to sources anywhere. The official source registry is hosted in GitHub, in the sources-metadata release.</p>"},{"location":"docs/sites/source-registry.html#format","title":"Format","text":"<pre><code>{\n    \"name\": \"...\",\n    \"home\": \"https://...\",\n    \"url\": \"https://...\",\n    \"sources\": [{\n        \"slug\": \"...\",\n        \"name\": \"...\",\n        \"hash\": \"...\",\n        \"lastCommit\": {\n            \"hash\": \"...\",\n            \"author\": \"...\",\n            \"date\": \"...\",\n            \"subject\": \"...\"\n        },\n        \"defaultSites\": [\"...\"],\n        \"supportedSites\": [\"...\"]\n    }]\n}\n</code></pre> <ul> <li><code>name</code>: the name of the source registry</li> <li><code>home</code>: the URL for the homepage</li> <li><code>url</code>: the base URL used when loading sources, such as <code>$url/$slug.zip</code> returns the source ZIP</li> <li><code>sources</code>: the list of sources managed by this registry<ul> <li><code>slug</code>: the machine name of this source (will be the name used to load the ZIP file), usually without spaces or special characters</li> <li><code>name</code>: the name of this source (same as <code>name</code> in the source model file)</li> <li><code>hash</code>: the SHA256 hash of the <code>model.js</code> file</li> <li><code>lastCommit</code>: the last change to this model file<ul> <li><code>hash</code>: the commit hash for this change</li> <li><code>author</code>: the author of this change</li> <li><code>date</code>: the date of this change in ISO format</li> <li><code>subject</code>: the subject of this change</li> </ul> </li> <li><code>defaultSites</code>: sites that are automatically added when adding this source (<code>sites.txt</code> file)</li> <li><code>supportedSites</code>: sites that are supported by this source (<code>supported.txt</code> file)</li> </ul> </li> </ul>"},{"location":"docs/sites/source.html","title":"Sources","text":""},{"location":"docs/sites/source.html#introduction","title":"Introduction","text":"<p>If your site is not based on Danbooru, Gelbooru, Shimmie, or another already-included source file, it gets more complicated to add it.</p> <p>Warning</p> <p>You must have knowledge of JavaScript to make your own JavaScript source.</p> <p>Note</p> <p>All examples below are using TypeScript.</p> <p>Note</p> <p>All types described in here are documented in depth in types.d.ts. Make sure to check it out if you're confused about the usage of a given type.</p> <p>This page is more about providing actual examples and explaining the flow of creating a source in a more \"natural\" way, rather than being an exhaustive documentation on types.</p> <p>To have a tutorial following the step-by-step creation of a real source as an example, see Source example.</p>"},{"location":"docs/sites/source.html#structure","title":"Structure","text":"<p>Sources can be found in your settings folder. On Windows, by default, it is <code>C:\\Users\\%USERNAME%\\AppData\\Local\\Bionus\\Grabber\\sites</code>.</p> <p>A source is defined by a folder containing three files:</p> <ul> <li><code>icon.png</code>: a PNG icon, usually the favicon of the source (recommended size: 16x16, it will be resized if larger)</li> <li><code>model.js</code>: the JS script that decides which URLs to load and how to parse the results into images (usually compiled from a <code>model.ts</code> TypeScript file)</li> <li><code>supported.txt</code>: the list of supported  sites based on this source, separated by a new line</li> <li><code>sites.txt</code>: the list of default sites to add when installing this source, separated by a new line. This file can be ignored and will be created when adding a new site using this source in Grabber</li> </ul>"},{"location":"docs/sites/source.html#utils","title":"Utils","text":"<p>The JS environment used by Grabber is not fully fledged. Therefore, there is a helper to help do a few things that are not easily possible otherwise: JavaScript model helper.</p> <p>Also, note that you can use the <code>console</code> commands as in JavaScript to generate logs in Grabber's console. Supported methods:</p> <ul> <li><code>console.debug</code> (debug level, not shown by default)</li> <li><code>console.info</code> (info level)</li> <li><code>console.log</code> (info level)</li> <li><code>console.warn</code> (warning level)</li> <li><code>console.error</code> (error level)</li> </ul>"},{"location":"docs/sites/source.html#basics","title":"Basics","text":"<p>A basic source file simply exports a <code>source</code> object, defined by the <code>ISource</code> type. It must have a name and at least one API. All other fields are optional.</p> <p>Example </p><pre><code>export const source: ISource = {\n    name: \"New source\",\n    apis: {\n        api_id: api,\n    },\n};\n</code></pre><p></p>"},{"location":"docs/sites/source.html#api","title":"API","text":"<p>A source can have one or more APIs, defined by the <code>IApi</code> type. It must have a name, an <code>auth</code> array (which can be empty), and the <code>search</code> endpoint description.</p> <p>Most sources have only one API. Examples are API types are \"JSON\", \"XML\", \"RSS\", or even \"HTML\". HTML is harder to parse and prone to breaking, but it's sometimes the only option for sources that don't provide a public API.</p> <p>Example </p><pre><code>const api = {\n    name: \"JSON\", // The name of the API\n    auth: [], // The ID of the auth required to use this API, multiple values means OR\n\n    search: {\n        url: search_url_function,\n        parse: parse_url_function,\n    },\n}\n</code></pre><p></p>"},{"location":"docs/sites/source.html#search-url-function","title":"Search \"url\" function","text":"<p>The goal of this function is to return the URL that lists the images for a given search on that source.</p> <p>The main parameter, <code>query</code>, contains a <code>search</code> string containing the user's input, as well as a <code>page</code> number containing the page number the user wants to see.</p> <p>From this, the function must return a string representing the URL to load. Note that you shouldn't include the base URL / domain in that link. It's recommended to use an absolute path instead.</p> <p>Example </p><pre><code>function(query) {\n    return \"/posts.json?page=\" + query.page + \"&amp;tags=\" + encodeURIComponent(query.search);\n}\n</code></pre><p></p>"},{"location":"docs/sites/source.html#search-parse-function","title":"Search \"parse\" function","text":"<p>Parameters:</p> <ul> <li>src (<code>string</code>)</li> </ul> <p>Returns: <code>{ images: {}[], tags?: { id?: number, name: string, count?: number, type?: string, typeId?: number }[], error?: string }</code></p>"},{"location":"docs/sites/source.html#tags-url-function","title":"Tags \"url\" function","text":"<p>Parameters:</p> <ul> <li>query (<code>{ search: string, page: number }</code>)</li> <li>opts (<code>{ limit: number, auth: {} }</code>)</li> </ul> <p>Returns: (either)</p> <ul> <li><code>string</code>: an URL</li> <li><code>{ url: string, headers?: { [key: string]: string }</code>: a URL and headers</li> <li><code>{ error?: string }</code>: an error</li> </ul>"},{"location":"docs/sites/source.html#description","title":"Description","text":"<p>Builds a tag listing API url from a search query.</p>"},{"location":"docs/sites/source.html#example","title":"Example","text":"<pre><code>function(query, opts) {\n    return \"/tags.json?limit=\" + opts.limit + \"&amp;page=\" + query.page;\n}\n</code></pre>"},{"location":"docs/sites/source.html#tags-parse-function","title":"Tags \"parse\" function","text":"<p>Parameters:</p> <ul> <li>src (<code>string</code>)</li> </ul> <p>Returns: <code>{ tags?: { id?: number, name: string, count?: number, type?: string, typeId?: number }[], error?: string }</code></p>"},{"location":"docs/sites/source.html#auth","title":"Auth","text":""},{"location":"docs/sites/source.html#url-auth","title":"URL auth","text":"<p>The credentials are passed directly in the URL of each request.</p>"},{"location":"docs/sites/source.html#example_1","title":"Example","text":"<pre><code>{\n    type: \"url\",\n    fields: [\n        {\n            key: \"login\",\n            type: \"username\",\n        },\n        {\n            key: \"password_hash\",\n            type: \"hash\",\n            hash: \"sha1\",\n            salt: \"choujin-steiner--%value%--\",\n        },\n    ],\n}\n</code></pre>"},{"location":"docs/sites/source.html#get-and-post-auth","title":"GET and POST auth","text":"<p>The credentials are sent to a given URL on the website to login before doing any request.</p>"},{"location":"docs/sites/source.html#example_2","title":"Example","text":"<pre><code>{\n    type: \"post\", // Either \"get\" or \"post\"\n    url: \"/session\",\n    fields: [\n        {\n            key: \"name\",\n            type: \"username\",\n        },\n        {\n            key: \"password\",\n            type: \"password\",\n        },\n    ],\n    check: {\n        type: \"cookie\",\n        key: \"password_hash\",\n    },\n}\n</code></pre>"},{"location":"docs/sites/source.html#oauth-2-auth","title":"OAuth 2 auth","text":""},{"location":"docs/sites/source.html#example_3","title":"Example","text":"<pre><code>{\n    type: \"oauth2\",\n    authType: \"password\", // Either \"password\", \"client_credentials\", or \"header_basic\"\n    tokenUrl: \"/auth/token\",\n    requestUrl: \"/auth/request\", // Optional\n    refreshTokenUrl: \"/auth/refresh\", // Optional\n    scope: [\"user\"], // Optional\n}\n</code></pre>"},{"location":"docs/sites/source.html#tag-format","title":"Tag format","text":"<p>A tag format is defined by two fields:</p> <ul> <li><code>case</code>: the word casing:<ul> <li><code>lower</code>: some tag</li> <li><code>upper_first</code>: Some tag</li> <li><code>upper</code>: Some Tag</li> <li><code>caps</code>: SOME TAG</li> </ul> </li> <li><code>wordSeparator</code>: the separator to add between each word</li> </ul>"},{"location":"docs/sites/source.html#example_4","title":"Example","text":"<pre><code>{\n    case: \"lower\",\n    wordSeparator: \"_\",\n}\n</code></pre> Will have tags looking like \"some_tag\"."},{"location":"docs/sites/source.html#search-format","title":"Search format","text":"<p>A search format must define at least a <code>and</code> operator. An operator is either:</p> <ul> <li>A string such as <code>&amp;&amp;</code></li> <li>An object of type <code>{ separator: string, prefix?: string }</code>, where the separator is what should be added between both operands, and the prefix what should be added before each operand</li> </ul> <p>If the search also support the OR operator, you must then define <code>or</code>, <code>parenthesis</code>, and <code>precedence</code>:</p> <ul> <li><code>or</code>: same as <code>and</code>, either a string or an object</li> <li><code>parenthesis</code>: a boolean to say whether this source supports parenthesis</li> <li><code>precedence</code>: which operator has precedence over the other, either <code>or</code> or <code>and</code></li> </ul>"},{"location":"docs/sites/source.html#example_5","title":"Example","text":"<pre><code>{\n    and: \" \",\n    or: {\n        separator: \" \",\n        prefix: \"~\",\n    },\n    parenthesis: false,\n    precedence: \"or\",\n}\n</code></pre> Will convert the logical search <code>(A | B) &amp; C</code> into the text \"~A ~B C\"."},{"location":"docs/sources/danbooru-2.0.html","title":"Danbooru (2.0)","text":""},{"location":"docs/sources/danbooru-2.0.html#danbooru-20","title":"Danbooru (2.0)","text":""},{"location":"docs/sources/danbooru-2.0.html#search-syntax","title":"Search syntax","text":"<p>https://danbooru.donmai.us/wiki_pages/help:cheatsheet</p>"},{"location":"docs/sources/deviantart.html","title":"DeviantArt","text":""},{"location":"docs/sources/deviantart.html#deviantart","title":"DeviantArt","text":"<p>Whatever URL is entered when adding a site with this source, it will be overriden by:</p> <ul> <li>https://backend.deviantart.com/</li> </ul>"},{"location":"docs/sources/deviantart.html#search-syntax","title":"Search syntax","text":"<p>https://www.deviantartsupport.com/en/article/how-do-i-narrow-down-a-search-on-deviantart</p> <p>In addition:</p> <ul> <li><code>order:ORDER</code>: how to sort results (possible values: \"newest\", \"popular-8-hours\", \"popular-24-hours\", \"popular-3-days\", \"popular-1-week\", \"popular-1-month\", \"popular-all-time\")</li> </ul>"},{"location":"docs/sources/e-hentai.html","title":"E-Hentai","text":""},{"location":"docs/sources/e-hentai.html#e-hentai","title":"E-Hentai","text":""},{"location":"docs/sources/e-hentai.html#search-syntax","title":"Search syntax","text":"<ul> <li><code>tag1 tag2</code>: basic tag search</li> <li><code>cats:NUMBER</code>: the <code>f_cats</code> URL parameter used to filter by category (default: <code>0</code>)</li> </ul>"},{"location":"docs/sources/gelbooru-0.2.html","title":"Gelbooru (0.2)","text":""},{"location":"docs/sources/gelbooru-0.2.html#gelbooru-02","title":"Gelbooru (0.2)","text":""},{"location":"docs/sources/gelbooru-0.2.html#search-syntax","title":"Search syntax","text":"<p>https://gelbooru.com/index.php?page=wiki&amp;s=view&amp;id=26263</p>"},{"location":"docs/sources/mastodon.html","title":"Mastodon","text":""},{"location":"docs/sources/mastodon.html#mastodon","title":"Mastodon","text":""},{"location":"docs/sources/mastodon.html#search-syntax","title":"Search syntax","text":"<ul> <li>Empty search: public timeline</li> <li><code>search</code>: search for statuses matching the search (requires login)</li> <li><code>user_id:ID</code>: get all media for a given user ID</li> </ul> <p>Note</p> <p>Getting an user ID on Mastodon is not trivial. You can do it by opening a status from a given user, then opening <code>https://domain/api/v1/statuses/STATUS_ID</code>. There, you'll see the user ID in the \"account.id\" JSON field.</p>"},{"location":"docs/sources/mastodon.html#login","title":"Login","text":"<p>You need an OAuth app to login. To do so, you need to have cURL (or equivalent) installed, and run this command:</p> <pre><code>curl -X POST -F \"client_name=Grabber\" -F \"redirect_uris=http://127.0.0.1/\" https://pawoo.net/api/v1/apps\n</code></pre> <p>The output will output a <code>client_id</code> and <code>client_secret</code> that you can use for the OAuth login.</p>"},{"location":"docs/sources/newgrounds-art.html","title":"Newgrounds Art","text":""},{"location":"docs/sources/newgrounds-art.html#newgrounds-art","title":"Newgrounds Art","text":""},{"location":"docs/sources/newgrounds-art.html#search-syntax","title":"Search syntax","text":"<ul> <li><code>order:{date,score,views}</code>: sort the results (default: <code>date</code>)</li> <li><code>approved:{yes,no}</code>: if set to \"yes\", only return approved artists. If set to \"no\", only return undiscovered artists. If not set, return both.</li> </ul>"},{"location":"docs/sources/nijie.html","title":"Nijie","text":""},{"location":"docs/sources/nijie.html#nijie","title":"Nijie","text":""},{"location":"docs/sources/nijie.html#search-syntax","title":"Search syntax","text":"<ul> <li><code>tag1 tag2</code>: basic tag search</li> <li><code>user:USER_ID</code>: fetch art from a given user</li> <li><code>type:{images,doujin,bookmarks}</code>: what kind of works to load when searching a user (default: <code>images</code>)</li> </ul>"},{"location":"docs/sources/pixiv.html","title":"Pixiv","text":""},{"location":"docs/sources/pixiv.html#pixiv","title":"Pixiv","text":"<p>Whatever URL is entered when adding a site with this source, it will be overriden by:</p> <ul> <li>https://app-api.pixiv.net/ (for search / listing)</li> <li>https://public-api.secure.pixiv.net/ (for galleries / details)</li> </ul>"},{"location":"docs/sources/pixiv.html#search-syntax","title":"Search syntax","text":"<ul> <li><code>tag1 tag2</code>: basic tag search</li> <li><code>mode:{partial,full,tc}</code>: tag search type (default: <code>partial</code>)</li> <li><code>bookmarks:USER_ID</code>: fetch a given user's bookmarks</li> <li><code>user:USER_ID</code>: fetch art from a given user</li> <li><code>is:followed</code>: show illustrations from artists you follow</li> <li><code>type:{illust,manga}</code>: only load works of a given type (only applies to <code>user:</code> and empty searches)</li> </ul>"},{"location":"docs/sources/pixiv.html#date","title":"Date","text":"<p>The date format is <code>YYYY-MM-DD</code>.</p> <ul> <li><code>date:EXACT</code>: get results from a given date</li> <li><code>date:&gt;=START</code>: get results after the given date (inclusive)</li> <li><code>date:&lt;=END</code>: get results before the given date (inclusive)</li> <li><code>date:START..END</code>: get results between the start and end date</li> </ul>"},{"location":"docs/sources/pixiv.html#login","title":"Login","text":"<p>Pixiv removed username/password authentication. As such, you need to use OAuth access and refresh tokens directly.</p> <p>Here's a useful Python script that allows you to do exactly that: https://gist.github.com/upbit/6edda27cb1644e94183291109b8a5fde</p>"},{"location":"docs/sources/reddit.html","title":"Reddit","text":""},{"location":"docs/sources/reddit.html#reddit","title":"Reddit","text":"<p>The only known working URL for this source is:</p> <ul> <li>https://www.reddit.com</li> </ul>"},{"location":"docs/sources/reddit.html#search-syntax","title":"Search syntax","text":"<ul> <li><code>some search</code>: basic search</li> <li><code>subreddit:SUBREDDIT</code>: load results from a specific subreddit</li> <li><code>user:USERNAME</code>: load results from a specific user</li> <li><code>sort:{hot,new,top,rising,relevance,comments}</code>: sort order for results. <code>rising</code> is only valid for listing. <code>relevance</code> and <code>comments</code> is only valid for search (default: <code>hot</code> for listing, <code>relevance</code> for search)</li> <li><code>since:{hour,day,week,month,year,all}</code>: retrieve posts for a given duration, only valid for search or \"top\" listing (default: <code>all</code>)</li> </ul>"},{"location":"docs/sources/shimmie.html","title":"Shimmie","text":""},{"location":"docs/sources/shimmie.html#shimmie","title":"Shimmie","text":""},{"location":"docs/sources/shimmie.html#search-syntax","title":"Search syntax","text":"<p>https://shimmie.shishnet.org/ext_doc/index</p> <p>In addition:</p> <ul> <li><code>width</code> + <code>height</code> will be automatically converted to <code>size</code> if possible</li> <li>Range searches (e.g. <code>meta:A..B</code>) are automatically converted to two comparisons (e.g. <code>meta:&gt;=A meta:&lt;=B</code>)</li> <li><code>date:</code> is transformed to <code>posted:</code></li> <li><code>downvote:</code> is transformed to <code>downvoted_by:</code></li> <li><code>upvote:</code> is transformed to <code>upvoted_by:</code></li> <li><code>tagcount:</code> is transformed to <code>tags:</code></li> <li><code>fav:</code> is transformed to <code>favourited_by</code> or <code>favorited_by_userno</code> depending on whether the second part is a number or not</li> </ul>"},{"location":"docs/sources/twitter.html","title":"Twitter","text":""},{"location":"docs/sources/twitter.html#twitter","title":"Twitter","text":"<p>The only known working URL for this source is:</p> <ul> <li>https://api.twitter.com</li> </ul> <p>Warning</p> <p>Twitter results are post-filtered to remove tweets without images. As such, when searching for an account with lots of tweets without media, you might get less results than expected, sometimes even an empty page. In that case, just go to the next page. It is also recommended to increase the images per page setting to see more results at once.</p>"},{"location":"docs/sources/twitter.html#search-syntax","title":"Search syntax","text":"<ul> <li><code>Username</code>: get all media for a given user handle</li> <li><code>user_id:ID</code>: get all media for a given user ID</li> <li><code>list_id:ID</code>: get all media for a given list ID</li> <li><code>retweets:{yes,no}</code>: whether to also get media from retweets (default: <code>yes</code>)</li> <li><code>replies:{yes,no}</code>: whether to also get media from replies (default: <code>yes</code>)</li> </ul>"},{"location":"docs/tools/blacklist-fixer.html","title":"Blacklist fixer","text":""},{"location":"docs/tools/blacklist-fixer.html#introduction","title":"Introduction","text":"<p>The blacklist fixer is a tool used to retroactively apply a blacklist to already downloaded images.</p> <p>For example, if you already downloaded a few thousands of images, but forgot to blacklist a certain tag, the blacklist fixer can be used to detect which downloaded images contain tags from the new blacklist, and delete them.</p>"},{"location":"docs/tools/blacklist-fixer.html#limitations","title":"Limitations","text":"<p>There are few limitations for the blacklist fixer:</p> <ul> <li>It is unable to extract the tags from the filename or anywhere else, so it will make a request to the server for each image to get its tags</li> <li>You can only use one source for fetching an image's tags</li> <li>If your filename does not contain the image's MD5, Grabber will re-calculate it, which might be different from the server's image's MD5</li> </ul>"},{"location":"docs/tools/image-renamer.html","title":"Image renamer","text":""},{"location":"docs/tools/image-renamer.html#introduction","title":"Introduction","text":"<p>The image renamer is a tool used to rename existing images when you change your filename.</p> <p>For example, if you already downloaded a few thousands of images, but decided to change your filename format later on, the image renamer can be used to rename your already downloaded images to the new format.</p>"},{"location":"docs/tools/image-renamer.html#limitations","title":"Limitations","text":"<p>There are few limitations for the image renamer:</p> <ul> <li>It is unable to extract information from the filename or anywhere else, so it will make a request to the server for each image to get its tags and other information</li> <li>You can only use one source for fetching an image's information</li> <li>If your filename does not contain the image's MD5, Grabber will re-calculate it, which might be different from the server's image's MD5</li> <li>Some tags  like <code>%search%</code> are not supported because the program will do a new search to fetch the image's details</li> </ul>"},{"location":"docs/tools/tag-loader.html","title":"Tag loader","text":""},{"location":"docs/tools/tag-loader.html#introduction","title":"Introduction","text":"<p>Most sources do not provide detailed tags information when listing results. So all the program knows from the results is that some image has tags such as \"tag1 tag2 tag3\". However, if your filename contains a token such as <code>%character%</code>, Grabber will not be able to generate the filename with this information, because it doesn't know what types are all those tags: is \"tag1\" a character, an artist, some general tag or something else? Since the API doesn't provide this information, Grabber doesn't know.</p> <p>By default, if there is missing tag type information, the program will have to load the image's information page before starting to download the image. From there, it will parse the tags again, hopefully this time with their type, in order to be able to generate the correct filename. That means that for each image, 2 network calls will be done to the server: first to load the image's details, then to download the actual file.</p> <p>The goal of the tag loader is to generate a local database to store all tags from a given source, along with their type. This way, even with incomplete tag type information, as long as the program knows the name of the tag, it can match it to its type in the tag database. This way, Grabber will be able to make less requests to the server, saving both download times and reducing the load on the servers.</p>"},{"location":"docs/tools/tag-loader.html#logs","title":"Logs","text":"<p>The following log can be a hint that the source you're using would work more efficiently were you to load their tag database first:</p> <pre><code>Not enough information to directly load the image (from blacklist: 0 / from file url: 0 / from filename tags: 1/1)\n</code></pre> <p>You'll notice three parts in this line:</p> <ul> <li><code>from blacklist: 1</code>: you have a blacklist set, but the tags could not be loaded from the listing page</li> <li><code>from file url: 1</code>: this source only provides the download link for the image on the details page</li> <li><code>from filename tags: 1/1</code>: specific tags are used in the filename (like <code>%character%</code>) but the image contain some non-typed tags</li> <li><code>from filename tags: 1/2</code>: this source only provides some required token (or all) on the details page</li> </ul> <p>Note that only in the <code>from filename tags: 1/1</code> case would a  tag database help. In other cases, even with a tag database, the details would still need to be loaded.</p>"},{"location":"docs/tools/tag-loader.html#pre-generated-databases","title":"Pre-generated databases","text":"<p>You can find some already generated databases directly on GitHub: https://github.com/Bionus/imgbrd-grabber/releases/tag-databases</p> <p>Note that they are only generated for a handful of sources and might not be totally up-to-date. However, they can be useful to get started quickly without having to generate one yourselves.</p>"},{"location":"docs/tools/tag-loader.html#command-line-interface","title":"Command-line interface","text":"<p>Tag databases can also be loaded by CLI, using the <code>--load-tag-database</code> switch. See Command-line interface for more details.</p>"},{"location":"blog/archive/2025.html","title":"2025","text":""},{"location":"blog/archive/2025.html#2025","title":"2025","text":""},{"location":"blog/archive/2024.html","title":"2024","text":""},{"location":"blog/archive/2024.html#2024","title":"2024","text":""},{"location":"blog/archive/2023.html","title":"2023","text":""},{"location":"blog/archive/2023.html#2023","title":"2023","text":""},{"location":"blog/archive/2022.html","title":"2022","text":""},{"location":"blog/archive/2022.html#2022","title":"2022","text":""},{"location":"blog/archive/2021.html","title":"2021","text":""},{"location":"blog/archive/2021.html#2021","title":"2021","text":""},{"location":"blog/archive/2020.html","title":"2020","text":""},{"location":"blog/archive/2020.html#2020","title":"2020","text":""},{"location":"blog/archive/2019.html","title":"2019","text":""},{"location":"blog/archive/2019.html#2019","title":"2019","text":""},{"location":"blog/category/release.html","title":"Release","text":""},{"location":"blog/category/release.html#release","title":"Release","text":""},{"location":"blog/category/linux.html","title":"Linux","text":""},{"location":"blog/category/linux.html#linux","title":"Linux","text":""},{"location":"blog/category/android.html","title":"Android","text":""},{"location":"blog/category/android.html#android","title":"Android","text":""},{"location":"blog/page/2/index.html","title":"Blog","text":""},{"location":"blog/page/2/index.html#blog","title":"Blog","text":""},{"location":"blog/page/3/index.html","title":"Blog","text":""},{"location":"blog/page/3/index.html#blog","title":"Blog","text":""},{"location":"blog/page/4/index.html","title":"Blog","text":""},{"location":"blog/page/4/index.html#blog","title":"Blog","text":""},{"location":"blog/archive/2021/page/2.html","title":"2021","text":""},{"location":"blog/archive/2021/page/2.html#2021","title":"2021","text":""},{"location":"blog/category/release/page/2.html","title":"Release","text":""},{"location":"blog/category/release/page/2.html#release","title":"Release","text":""},{"location":"blog/category/release/page/3.html","title":"Release","text":""},{"location":"blog/category/release/page/3.html#release","title":"Release","text":""},{"location":"blog/category/release/page/4.html","title":"Release","text":""},{"location":"blog/category/release/page/4.html#release","title":"Release","text":""}]}